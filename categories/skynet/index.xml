<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Skynet on FrozenLychees</title><link>https://frozenlychees.github.io/categories/skynet/</link><description>Recent content in Skynet on FrozenLychees</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 15 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://frozenlychees.github.io/categories/skynet/index.xml" rel="self" type="application/rss+xml"/><item><title>Skynet源码阅读笔记(十四)-Skynet进程架构总览</title><link>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E5%9B%9B-skynet%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84%E6%80%BB%E8%A7%88/</link><pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate><guid>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E5%9B%9B-skynet%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84%E6%80%BB%E8%A7%88/</guid><description>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E5%9B%9B-skynet%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84%E6%80%BB%E8%A7%88/skynet.png" alt="Featured image of post Skynet源码阅读笔记(十四)-Skynet进程架构总览" />&lt;h1 id="skynet源码阅读笔记-skynet进程架构总览">Skynet源码阅读笔记-Skynet进程架构总览
&lt;/h1>&lt;p>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E5%9B%9B-skynet%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84%E6%80%BB%E8%A7%88/skynet%E6%80%BB%E8%A7%88.png"
width="8600"
height="5903"
srcset="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E5%9B%9B-skynet%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84%E6%80%BB%E8%A7%88/skynet%E6%80%BB%E8%A7%88_hu5398179536763739484.png 480w, https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E5%9B%9B-skynet%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84%E6%80%BB%E8%A7%88/skynet%E6%80%BB%E8%A7%88_hu7357096193333574464.png 1024w"
loading="lazy"
alt="skynet总览"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;p>skynet进程在架构如上图所示，skynet的主要工作模式就是通过创建很多的服务来完成的，服务与服务之间相互隔离，通过消息队列的方式将消息投递到对应的服务上。无论这个消息是来自网络、定时器或者是其他模块之间的消息，他们都会被打包成相同的类型，通过type来区别。&lt;/p>
&lt;p>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E5%9B%9B-skynet%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84%E6%80%BB%E8%A7%88/skynet%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.png"
width="367"
height="799"
srcset="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E5%9B%9B-skynet%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84%E6%80%BB%E8%A7%88/skynet%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B_hu14209706775156221845.png 480w, https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E5%9B%9B-skynet%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84%E6%80%BB%E8%A7%88/skynet%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B_hu6369978266664616690.png 1024w"
loading="lazy"
alt="skynet启动流程"
class="gallery-image"
data-flex-grow="45"
data-flex-basis="110px"
>&lt;/p>
&lt;p>skynet的主线程的启动流程大致也如上，启动完毕后久等待信号关闭线程进行资源回收了。&lt;/p>
&lt;p>其中业务流程是在bootstrap中进行启动的，业务根据自己的需要改写lua层面的启动流程即可。&lt;/p>
&lt;h1 id="个人理解">个人理解
&lt;/h1>&lt;p>skynet的这种方式模式可以认为是单进程多线程的一个模型，对于内存共享行的业务来说比较合适，它的主要业务处理是通过worker线程来完成的，在一台机器上启动足够多的即可充分使用机器性能，对于跨线程的消息投递来说也可以节省序列化相关的CPU消耗。但如果使用不当，感觉也会出现比较奇怪的问题（假设发送之后立即把对象给改写了的话，感觉可能会出现问题）。&lt;/p>
&lt;p>存在的其他缺陷的话就是容易对于一些公用功能，如果存在特别大量消息要处理的话，那可能就会存在异常；又或者是类似socket线程调用了阻塞式的系统API的话，就会导致所有业务都无法正常进行了。在实际生产过程中遇到过一次使用skynet去发送http请求，但dns服务器发生了一些异常，导致socket线程被卡住的情况。&lt;/p>
&lt;p>但总归来说，skynet的提供的主要功能就是&lt;/p>
&lt;ol>
&lt;li>隔离各个业务模块&lt;/li>
&lt;li>单进程多线程尽量提升单台机器性能&lt;/li>
&lt;/ol>
&lt;p>对于一些跨机器的业务，skynet也提供了cluster集群等对应的解决思路，但其中有一些设计个人感觉会有点奇怪，在做完整的架构设计前，最好花一些时间去了解。&lt;/p></description></item><item><title>Skynet源码阅读笔记(十三)-cluster集群</title><link>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E4%B8%89-cluster%E9%9B%86%E7%BE%A4/</link><pubDate>Mon, 02 Sep 2024 00:00:00 +0000</pubDate><guid>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E4%B8%89-cluster%E9%9B%86%E7%BE%A4/</guid><description>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E4%B8%89-cluster%E9%9B%86%E7%BE%A4/skynet.png" alt="Featured image of post Skynet源码阅读笔记(十三)-cluster集群" />&lt;h1 id="skynet源码阅读笔记-cluster模式分析">Skynet源码阅读笔记-cluster模式分析
&lt;/h1>&lt;p>项目中主要用到的是cluster模式，这边就简单的分析一下具体它是如何运作的。&lt;/p>
&lt;h2 id="cluster-模型">cluster 模型
&lt;/h2>&lt;p>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E4%B8%89-cluster%E9%9B%86%E7%BE%A4/cluster%E9%9B%86%E7%BE%A4.jpg"
width="1798"
height="756"
srcset="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E4%B8%89-cluster%E9%9B%86%E7%BE%A4/cluster%E9%9B%86%E7%BE%A4_hu4037574301199394825.jpg 480w, https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E4%B8%89-cluster%E9%9B%86%E7%BE%A4/cluster%E9%9B%86%E7%BE%A4_hu5198646295053042214.jpg 1024w"
loading="lazy"
alt="cluster集群"
class="gallery-image"
data-flex-grow="237"
data-flex-basis="570px"
>&lt;/p>
&lt;p>从途中可以看出clusterd才是cluter集群模式的主体，其中保存了两个主要的数据结构用于发送和接受消息。 从clusterSender 发起的连接会通过gateserver收到并通过clusterd创建的clusterAgent进行消息的处理。&lt;/p>
&lt;h2 id="clusterlua">cluster.lua
&lt;/h2>&lt;p>在使用的时候，需要将cluster require进来。而 cluster 这个文件本身主要是提供对外接口，在require的时候会执行init，init中调用uniqueserver来生成一个 clusterd 的服务，这个服务才是cluster模式的主体。&lt;/p>
&lt;h2 id="clusterdlua">clusterd.lua
&lt;/h2>&lt;p>cluter集群的主体，这边会对处理对其他clusterd的连接和消息处理。&lt;/p>
&lt;h3 id="listen">listen
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">--- cluster.lua
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function cluster.open(port, maxclient)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if type(port) == &amp;#34;string&amp;#34; then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return skynet.call(clusterd, &amp;#34;lua&amp;#34;, &amp;#34;listen&amp;#34;, port, nil, maxclient)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return skynet.call(clusterd, &amp;#34;lua&amp;#34;, &amp;#34;listen&amp;#34;, &amp;#34;0.0.0.0&amp;#34;, port, maxclient)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--- clusterd.lua
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function command.listen(source, addr, port, maxclient)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local gate = skynet.newservice(&amp;#34;gate&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if port == nil then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local realaddr, realport = skynet.call(gate, &amp;#34;lua&amp;#34;, &amp;#34;open&amp;#34;, { address = addr, port = port, maxclient = maxclient })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.ret(skynet.pack(realaddr, realport))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当外部调用open的时候，会转发到clusterd的listen接口，该接口会创建一个gate的service，然后调用gate的open接口，成功后返回实际的地址和端口。&lt;/p>
&lt;h3 id="发起连接">发起连接
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="o">---&lt;/span> &lt;span class="n">cluster&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lua&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">function&lt;/span> &lt;span class="n">cluster&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reload&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clusterd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;lua&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;reload&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">---&lt;/span> &lt;span class="n">clusterd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lua&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">function&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reload&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">loadconfig&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ret&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">skynet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nil&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当调用cluter的reload接口，并传入对应的配置后，相当于调用的是clusterd.loadconfig(config), 这个config的格式是 {name: addr},具体看看loadconfig中做了什么&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="o">---&lt;/span> &lt;span class="n">clusterd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lua&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">local&lt;/span> &lt;span class="n">node_channel&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">setmetatable&lt;/span>&lt;span class="p">({},&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">__index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">open_channel&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">function&lt;/span> &lt;span class="n">loadconfig&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tmp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">tmp&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">nil&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span> &lt;span class="o">---&lt;/span> &lt;span class="err">传入空的时候&lt;/span> &lt;span class="err">读环境配置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">local&lt;/span> &lt;span class="n">reload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">address&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">pairs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tmp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">sub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__&amp;#34;&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">---&lt;/span> &lt;span class="err">特殊开头的名字需要输出一下&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">....&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">address&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="bp">false&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;string&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">node_address&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">~=&lt;/span> &lt;span class="n">address&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">--&lt;/span> &lt;span class="n">address&lt;/span> &lt;span class="n">changed&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">---&lt;/span> &lt;span class="err">原有连接的地址变了&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">node_sender&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">--&lt;/span> &lt;span class="n">reset&lt;/span> &lt;span class="n">connection&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">node_sender&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">exist&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">node_channel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">table&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">reload&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">node_address&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">address&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">local&lt;/span> &lt;span class="n">ct&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">connecting&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">ct&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">ct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">namequery&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">nowaiting&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">---&lt;/span> &lt;span class="err">查询地址的处理&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Cluster node [&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">] resloved : &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">address&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wakeup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">namequery&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">nowaiting&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">---&lt;/span> &lt;span class="err">有设置&lt;/span>&lt;span class="n">nowaiting的特殊处理&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">....&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">ipairs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">reload&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">--&lt;/span> &lt;span class="n">open_channel&lt;/span> &lt;span class="n">would&lt;/span> &lt;span class="n">block&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">open_channel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">node_channel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>node_address 维护的是名字到地址的映射，node_sender 维护的是名字到sender的映射，当访问不存在的name时，会触发open_channel。&lt;/p>
&lt;p>loadConfig中做的主要是将传入的{name:address}的配置进行处理，如果之前不在node_address 中的，则标记需要连接；如果之前在node_address中的，则说明已经连接上了，需要重新连接。最后对每一个需要连接的配置启动一个协程进行open_channel的操作。&lt;/p>
&lt;h3 id="open_channel">open_channel
&lt;/h3>&lt;p>open_channel 的主要目的就是连接对应的地址&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="o">---&lt;/span> &lt;span class="err">这边&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="err">是&lt;/span>&lt;span class="n">node_channel&lt;/span>&lt;span class="err">，&lt;/span> &lt;span class="n">key是对应name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">local&lt;/span> &lt;span class="n">function&lt;/span> &lt;span class="n">open_channel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">local&lt;/span> &lt;span class="n">ct&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">connecting&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">ct&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span> &lt;span class="o">---&lt;/span> &lt;span class="err">如果已经在连接了，则这边不会重复连接，协程会被挂起到另一个协程连接完成&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ct&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">connecting&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">local&lt;/span> &lt;span class="n">address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node_address&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">address&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">nil&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">nowaiting&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">---&lt;/span> &lt;span class="err">如果连接的&lt;/span>&lt;span class="n">name没有对应的地址&lt;/span>&lt;span class="err">，则会挂起该协程，直到&lt;/span>&lt;span class="n">reload&lt;/span> &lt;span class="err">对应配置的时候被唤醒&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">local&lt;/span> &lt;span class="n">succ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">address&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">local&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;([^:]+):(.*)$&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node_sender&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">nil&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">---&lt;/span> &lt;span class="err">创建对应的&lt;/span>&lt;span class="n">sender&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">newservice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;clustersender&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nodename&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">node_sender&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">--&lt;/span> &lt;span class="n">double&lt;/span> &lt;span class="n">check&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">kill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node_sender&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">node_sender&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">---&lt;/span> &lt;span class="err">调用&lt;/span>&lt;span class="n">sender的changenode&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">succ&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pcall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">skynet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;lua&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;changenode&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">succ&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ct&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">channel&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">node_sender_closed&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">err&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;changenode [&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">] (&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">:&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">) failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">elseif&lt;/span> &lt;span class="n">address&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="bp">false&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node_sender&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">nil&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">node_sender_closed&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">--&lt;/span> &lt;span class="n">no&lt;/span> &lt;span class="n">sender&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">closed&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">always&lt;/span> &lt;span class="n">succ&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">succ&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">--&lt;/span> &lt;span class="n">trun&lt;/span> &lt;span class="n">off&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">sender&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">---&lt;/span> &lt;span class="err">如果地址是&lt;/span>&lt;span class="bp">false&lt;/span>&lt;span class="err">，则直接关闭对应的&lt;/span>&lt;span class="n">sender&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">succ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">err&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pcall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">skynet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">call&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;lua&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;changenode&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">false&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">succ&lt;/span> &lt;span class="n">then&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">trun&lt;/span> &lt;span class="n">off&lt;/span> &lt;span class="n">failed&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">wait&lt;/span> &lt;span class="n">next&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="n">todo&lt;/span> &lt;span class="n">turn&lt;/span> &lt;span class="n">off&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">node_sender_closed&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">err&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;cluster node [&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">] is absent.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">---&lt;/span> &lt;span class="err">唤醒所有等待连接的协程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">connecting&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">co&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">ipairs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ct&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wakeup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">co&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">---&lt;/span> &lt;span class="err">在检查一遍地址，如果不正确则再次连接&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">node_address&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">~=&lt;/span> &lt;span class="n">address&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">open_channel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">succ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>open_channel 看起来有点长，实际并不会很复杂。主要目的就是为了创建clustersender，并调用其changenode。这边可以简单认为调用成功的话，就是连接完毕了。&lt;/p>
&lt;h2 id="gate-和-gateserver">gate 和 gateServer
&lt;/h2>&lt;p>现在目光来到gate这边，因为上面发起连接之后，对方处理listen的gate此时应该就会收到对应的信息。&lt;/p>
&lt;p>gate.lua文件里面可以看到实际上这个文件就是一个中间层，提供gateserver到外部的消息接口 以及 外部调用到gateServer的接口。&lt;/p>
&lt;p>在gate 这个文件的最后，执行了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">local handler = {}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gateserver.start(handler)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个handler是gate.lua中的一个局部变量，用来承接从gateServer中抛出的事件转发给外部用的。&lt;/p>
&lt;p>在clusterd创建geta的时候，还顺便调用了open这个接口&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">function handler.open(source, conf)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> watchdog = conf.watchdog or source
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return conf.address, conf.port
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>open接口内就把clusterd作为watchdog给保存了下来。&lt;/p>
&lt;h3 id="gateserver">gateServer
&lt;/h3>&lt;p>gateServer.lua中也有很多的函数，但不用害怕，绝大多是都是命令，这边初始化的时候就只执行了下面这段代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.register_protocol {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name = &amp;#34;socket&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id = skynet.PTYPE_SOCKET, -- PTYPE_SOCKET = 6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> unpack = function ( msg, sz )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return netpack.filter( queue, msg, sz)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dispatch = function (_, _, q, type, ...)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> queue = q
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if type then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MSG[type](...)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local function init()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.dispatch(&amp;#34;lua&amp;#34;, function (_, address, cmd, ...)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local f = CMD[cmd]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if f then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.ret(skynet.pack(f(address, ...)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.ret(skynet.pack(handler.command(cmd, address, ...)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if handler.embed then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> init()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.start(init)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这边注册了 skynet.PTYPE_SOCKET 这个类型的协议，已经lua 类型的协议的dispatch方式。lua类型的协议搜索空间是CMD，而 skynet.PTYPE_SOCKET 的搜索空间是MSG&lt;/p>
&lt;h3 id="accept">accept
&lt;/h3>&lt;p>当底层收到连接了之后，会抛出连接的信息给到gateServer&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">int
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_socket_poll() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct socket_server *ss = SOCKET_SERVER;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(ss);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct socket_message result;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int more = 1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int type = socket_server_poll(ss, &amp;amp;result, &amp;amp;more);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> switch (type) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> case SOCKET_ACCEPT:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> forward_message(SKYNET_SOCKET_TYPE_ACCEPT, true, &amp;amp;result);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> break;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (more) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return -1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return 1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>forward_message 会将 SOCKET_ACCEPT 包装成 id为 skynet.PTYPE_SOCKET 的信息，其中还会把 skynet_socket_message 的type标记成 SKYNET_SOCKET_TYPE_ACCEPT。&lt;/p>
&lt;p>在gateServer中接到这个消息后，会netpack.filter将其解开，得到对应的type为open，这一步是在lua-netpack.c中处理的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> --- gateServer.lua
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> function MSG.open(fd, msg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> client_number = client_number + 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if client_number &amp;gt;= maxclient then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> socketdriver.shutdown(fd)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if nodelay then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> socketdriver.nodelay(fd)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> connection[fd] = true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> handler.connect(fd, msg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --- gate.lua
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> function handler.connect(fd, addr)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local c = {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fd = fd,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ip = addr,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> connection[fd] = c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.send(watchdog, &amp;#34;lua&amp;#34;, &amp;#34;socket&amp;#34;, &amp;#34;open&amp;#34;, fd, addr)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>gateServer中open最主要的事情也就是将这个事件调出去，而gate中则是将对应的连接保存后，给watchdog发送消息，因为clueted在一开始的时候就将自己设置成了watchdog，所以这边消息就又回到了clusterd上。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">--- clusterd.lua
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function command.socket(source, subcmd, fd, msg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if subcmd == &amp;#34;open&amp;#34; then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.error(string.format(&amp;#34;socket accept from %s&amp;#34;, msg))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- new cluster agent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cluster_agent[fd] = false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local agent = skynet.newservice(&amp;#34;clusteragent&amp;#34;, skynet.self(), source, fd)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local closed = cluster_agent[fd]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cluster_agent[fd] = agent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if closed then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.send(agent, &amp;#34;lua&amp;#34;, &amp;#34;exit&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cluster_agent[fd] = nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>clusterd 上对于这个消息的处理就是将对应cluster_agent给创建出来，如果之前有对应fd的连接信息，则关闭掉之前的。&lt;/p>
&lt;h3 id="clusteragent">clusteragent
&lt;/h3>&lt;p>来到 clueteragent的创建&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">skynet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">function&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">---&lt;/span> &lt;span class="nx">注册协议&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">skynet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">register_protocol&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;client&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">skynet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PTYPE_CLIENT&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">unpack&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">cluster&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">unpackrequest&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dispatch&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">dispatch_request&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">--&lt;/span> &lt;span class="nx">fd&lt;/span> &lt;span class="nx">can&lt;/span> &lt;span class="nx">write&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">but&lt;/span> &lt;span class="nx">don&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="nx">read&lt;/span> &lt;span class="nx">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="kn">package&lt;/span> &lt;span class="nx">will&lt;/span> &lt;span class="nx">forward&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="nx">gate&lt;/span> &lt;span class="nx">though&lt;/span> &lt;span class="nx">client&lt;/span> &lt;span class="nx">protocol&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">---&lt;/span> &lt;span class="nx">此时fd只能写不能读&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="nx">需要通过forward协议完成后续的内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">skynet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">gate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;lua&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;forward&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fd&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">---&lt;/span> &lt;span class="nx">完成disptach的处理&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">skynet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">dispatch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;lua&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cmd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">cmd&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;exit&amp;#34;&lt;/span> &lt;span class="nx">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">close_fd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fd&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">skynet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">exit&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">elseif&lt;/span> &lt;span class="nx">cmd&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;namechange&amp;#34;&lt;/span> &lt;span class="nx">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">register_name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">new_register_name&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">skynet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nb">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Invalid command %s from %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cmd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">skynet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">address&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>clusteragent在创建的时候有一个特殊的处理是给gate发送了一个forward 的协议，发送forward之后会导致gate的连接状态更新，把连接的agent更新成clusteragent。同时也会让底层更新对应的socket状态&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="o">---&lt;/span> &lt;span class="nx">gate&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lua&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">function&lt;/span> &lt;span class="nx">CMD&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">forward&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">local&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">connection&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">fd&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">unforward&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">client&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">client&lt;/span> &lt;span class="nx">or&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">agent&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">address&lt;/span> &lt;span class="nx">or&lt;/span> &lt;span class="nx">source&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">gateserver&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">openclient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fd&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">---&lt;/span> &lt;span class="nx">gateserver&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lua&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">function&lt;/span> &lt;span class="nx">gateserver&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">openclient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fd&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">connection&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">fd&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nx">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">socketdriver&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fd&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">---&lt;/span> &lt;span class="nx">lua&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">void&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">socket_server_start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">struct&lt;/span> &lt;span class="nx">socket_server&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ss&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">uintptr_t&lt;/span> &lt;span class="nx">opaque&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">struct&lt;/span> &lt;span class="nx">request_package&lt;/span> &lt;span class="nx">request&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">u&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">resumepause&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">---&lt;/span> &lt;span class="nx">这个id&lt;/span> &lt;span class="nx">就是&lt;/span> &lt;span class="nx">lua传进来的fd&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">u&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">resumepause&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">opaque&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">opaque&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">send_request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ss&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;R&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">u&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">resumepause&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="o">---&lt;/span> &lt;span class="nx">这边给socket_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">c发送&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">---&lt;/span> &lt;span class="nx">socket_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">static&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">resume_socket&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">struct&lt;/span> &lt;span class="nx">socket_server&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ss&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="nx">request_resumepause&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="nx">socket_message&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">request&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span> &lt;span class="o">---&lt;/span> &lt;span class="nx">处理一些特殊的异常情况&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">uint8_t&lt;/span> &lt;span class="kd">type&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">ATOM_LOAD&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="kd">type&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">SOCKET_TYPE_PACCEPT&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="kd">type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">SOCKET_TYPE_PLISTEN&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ATOM_STORE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">SOCKET_TYPE_PACCEPT&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="err">?&lt;/span> &lt;span class="nx">SOCKET_TYPE_CONNECTED&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nx">SOCKET_TYPE_LISTEN&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">s&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">opaque&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">request&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">opaque&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">result&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">data&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;start&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">SOCKET_OPEN&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span> &lt;span class="o">---&lt;/span> &lt;span class="nx">处理一些特殊的异常情况&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>forward 信息最后回到底层之后，正常情况下会修改对应socket的信息，将type变成 SOCKET_TYPE_CONNECTED.&lt;/p>
&lt;h2 id="发送消息">发送消息
&lt;/h2>&lt;p>当我们要发送消息的时候，使用的是 cluster.call 这个接口&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">--- cluster.lua
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function cluster.call(node, address, ...)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- skynet.pack(...) will free by cluster.core.packrequest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local s = sender[node]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if not s then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --- 还没有的时候会进行等待处理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return skynet.call(s, &amp;#34;lua&amp;#34;, &amp;#34;req&amp;#34;, address, skynet.pack(...))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--- clusterSender.lua
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function command.req(...)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local ok, msg = pcall(send_request, ...)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if ok then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if type(msg) == &amp;#34;table&amp;#34; then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.ret(cluster.concat(msg))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.ret(msg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.error(msg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.response()(false)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">local function send_request(addr, msg, sz)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- msg is a local pointer, cluster.packrequest will free it
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local current_session = session
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local request, new_session, padding = cluster.packrequest(addr, session, msg, sz)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session = new_session
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ....
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return channel:request(request, current_session, padding)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个接口是通过node来找到对应的sender，最终通过channel的request来发送数据，这边可以认为就是给对应的fd发送数据。&lt;/p>
&lt;h2 id="接受消息">接受消息
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">--- gateserver.lua
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">local function dispatch_msg(fd, msg, sz)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if connection[fd] then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> handler.message(fd, msg, sz)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.error(string.format(&amp;#34;Drop message from fd (%d) : %s&amp;#34;, fd, netpack.tostring(msg,sz)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MSG.data = dispatch_msg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--- gate.lua
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function handler.message(fd, msg, sz)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- recv a package, forward it
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local c = connection[fd]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local agent = c.agent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if agent then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 这边就是clusteragent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- It&amp;#39;s safe to redirect msg directly , gateserver framework will not free msg.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.redirect(agent, c.client, &amp;#34;client&amp;#34;, fd, msg, sz)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.send(watchdog, &amp;#34;lua&amp;#34;, &amp;#34;socket&amp;#34;, &amp;#34;data&amp;#34;, fd, skynet.tostring(msg, sz))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- skynet.tostring will copy msg to a string, so we must free msg here.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.trash(msg,sz)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在gateserver.lua中接受消息后 调用的是MSG.data 接口，这边会调用handler的message，转发给对应的clusteragent, 这边转发的消息类型会变成client&lt;/p>
&lt;h3 id="clusteragent-1">clusteragent
&lt;/h3>&lt;p>在clueteragent中，对于client的消息是通过dispatch_request进行处理&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">local function dispatch_request(_,_,addr, session, msg, sz, padding, is_push)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local ok, response
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if addr == 0 then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ... --- 查询名字相关
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if cluster.isname(addr) then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addr = register_name[addr]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if addr then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if is_push then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.rawsend(addr, &amp;#34;lua&amp;#34;, msg, sz)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return -- no response
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ok , msg, sz = pcall(skynet.rawcall, addr, &amp;#34;lua&amp;#34;, msg, sz)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ok = false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> msg = &amp;#34;Invalid name&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if ok then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --- 打包回包数据
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> response = cluster.packresponse(session, true, msg, sz)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if type(response) == &amp;#34;table&amp;#34; then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for _, v in ipairs(response) do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> socket.lwrite(fd, v)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> socket.write(fd, response)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> response = cluster.packresponse(session, false, msg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> socket.write(fd, response)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这边化简后的代码如上，总的来说就是解析对应的数据，然后发送给对应的名字的服务，这个名字需要由其他服务主动来注册。调用完毕之后就会将数据打包，然后通过对应的socket write的方式将回包数据写入fd中。&lt;/p>
&lt;h1 id="小结">小结
&lt;/h1>&lt;p>这边基本把 cluster模式中几个比较重要的事情以源码分析的方式都分析了一下，虽然篇幅较长，但我感觉只要耐心看完应该会由收获。不过我个人没有get到为什么要读写分离成sender和agent的方式，可能是为了复用先用代码是新的一些功能？如果由我来实现的话，我可能会将这两个写在同一个结构内，感觉会更加统一一点。&lt;/p></description></item><item><title>Skynet源码阅读笔记(十二)-SkynetLuaApi分析</title><link>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E4%BA%8C-skynetluaapi%E5%88%86%E6%9E%90/</link><pubDate>Fri, 16 Aug 2024 00:00:00 +0000</pubDate><guid>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E4%BA%8C-skynetluaapi%E5%88%86%E6%9E%90/</guid><description>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E4%BA%8C-skynetluaapi%E5%88%86%E6%9E%90/skynet.png" alt="Featured image of post Skynet源码阅读笔记(十二)-SkynetLuaApi分析" />&lt;h1 id="skynet-api">skynet API
&lt;/h1>&lt;p>skynet 的API在 &lt;a class="link" href="https://github.com/cloudwu/skynet/wiki/LuaAPI" target="_blank" rel="noopener"
>LuaAPI&lt;/a> 中由简单的使用方式介绍，这边针对其中的部分API做一些源码上的分析&lt;/p>
&lt;h1 id="api-分类">API 分类
&lt;/h1>&lt;p>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E4%BA%8C-skynetluaapi%E5%88%86%E6%9E%90/lua_api.png"
width="1370"
height="592"
srcset="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E4%BA%8C-skynetluaapi%E5%88%86%E6%9E%90/lua_api_hu1508513238482406810.png 480w, https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E4%BA%8C-skynetluaapi%E5%88%86%E6%9E%90/lua_api_hu3048315196314421867.png 1024w"
loading="lazy"
alt="API 分类"
class="gallery-image"
data-flex-grow="231"
data-flex-basis="555px"
>&lt;/p>
&lt;p>这边将会按上面的几个大类来对 skynet 的 lua层常用API 进行源码上的分析&lt;/p>
&lt;h1 id="源码分析">源码分析
&lt;/h1>&lt;h2 id="服务的启动">服务的启动
&lt;/h2>&lt;p>skynet启动函数必须使用skynet.start来传入一个函数进行启动，这边分析一下skynet.start的源码，看看具体做了什么&lt;/p>
&lt;h3 id="skynetstart">skynet.start
&lt;/h3>&lt;p>在lua层启动一个服务的时候，是skynet.star这个API来启动的，启动时传入一个自定义的函数，在适当的时机会被调用以启动具体的服务。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">function skynet.start(start_func)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> c.callback(skynet.dispatch_message) -- 将当前服务的回调设置成disptach_message
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> init_thread = skynet.timeout(0, function() -- 设置一个定时器，在帧末尾执行skynet.init_service(start_func). 主要这边回调的时候执行的是dispatch
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.init_service(start_func)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> init_thread = nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end) -- 同时，skynet.timeout这边会产生一个协程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function skynet.init_service(start)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local function main()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_require.init_all() -- 执行start前会调用init_all
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> start()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local ok, err = xpcall(main, traceback) -- 通过xpcall的方式调用main，main中执行start函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if not ok then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.error(&amp;#34;init service failed: &amp;#34; .. tostring(err))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.send(&amp;#34;.launcher&amp;#34;,&amp;#34;lua&amp;#34;, &amp;#34;ERROR&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.exit()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.send(&amp;#34;.launcher&amp;#34;,&amp;#34;lua&amp;#34;, &amp;#34;LAUNCHOK&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动前会先调用skynet_require.init_all()， 这个函数可以让用户预先require所需要的文件。
启动的时候是将当前服务的回调函数设置城 skynet.dispatch_message, 注意这边不单单是设置定时器的回调，而是设置的服务的事件回调函数，这边的事件包括定时器、网络信息等。然后设置一个0秒后的定时器进行回调，skynet.timeout这个接口会产生一个协程用于执行回调函数。&lt;/p>
&lt;h2 id="消息分发">消息分发
&lt;/h2>&lt;p>这边消息指的是从skynet底层抛出的消息事件，在start的时候，将处理这个事件的函数指定成了 skynet.dispatch_message ，这边看看消息是如何在这个函数中被处理的&lt;/p>
&lt;h3 id="数据结构">数据结构
&lt;/h3>&lt;p>继续往下前，先看一些协程相关数据结构，避免在看源码的时候会被这些数据结构的含义给阻塞&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">local session_id_coroutine = {} -- session 到 co 的映射
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">local session_coroutine_id = {} -- co 到 session 的映射
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">local session_coroutine_address = {} -- co 到 来源服务的映射
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">local session_coroutine_tracetag = {} -- co 到 traceId的映射，用来记录协程的日志行为记录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">local unresponse = {} -- 使用skynet.response获得闭包且并没有使用闭包进行回包处理的协程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">local wakeup_queue = {} --被唤醒的co，co之前是主动sleep的
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">local sleep_session = {} -- token 到 session的 映射
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">local fork_queue = { h = 1, t = 0 } -- 保存 主动调用skynet.fork时产生的协程
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这边co指的是协程，session是由skynet产生，用来对应挂起的co；traceId是用来记录对应co的行为日志使用的。
sleep_session 中 保存token 到 主动sleep的协程对应的session 的映射 ，token是由用户置顶或者系统生成的。&lt;/p>
&lt;h3 id="skynetdispatch_message">skynet.dispatch_message
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">function skynet.dispatch_message(...)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local succ, err = pcall(raw_dispatch_message,...) -- raw_dispatch_message中需要根据不同的事件类型来执行对应的处理函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> while true do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if fork_queue.h &amp;gt; fork_queue.t then -- 如果队列中没有需要处理的事件，则退出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- queue is empty
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fork_queue.h = 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fork_queue.t = 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> break
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- pop queue
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local h = fork_queue.h -- 取出队列中需要处理的协程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local co = fork_queue[h]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fork_queue[h] = nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fork_queue.h = h + 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local fork_succ, fork_err = pcall(suspend,co,coroutine_resume(co)) -- 执行协程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if not fork_succ then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ... -- 这边只是对错误信息进行拼接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(succ, tostring(err)) -- 如果有报错则统一输出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>skynet.dispatch_message 的过程可以看成两个部分&lt;/p>
&lt;ol>
&lt;li>通过 raw_dispatch_message 来处理事件&lt;/li>
&lt;li>执行fork_queue中的协程，这部分是用户主动调用skynet.fork产生的&lt;/li>
&lt;/ol>
&lt;h3 id="raw_dispatch_message">raw_dispatch_message
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">local function raw_dispatch_message(prototype, msg, sz, session, source)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- skynet.PTYPE_RESPONSE = 1, read skynet.h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if prototype == 1 then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 处理 response
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 处理其他数据
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>raw_dispatch_message的参数含义如下&lt;/p>
&lt;ul>
&lt;li>prototype 事件类型，具体看 skynet.h&lt;/li>
&lt;li>msg 消息&lt;/li>
&lt;li>sz 消息长度&lt;/li>
&lt;li>session 执行事件的协程标记&lt;/li>
&lt;li>source 消息来源&lt;/li>
&lt;/ul>
&lt;p>整个 raw_dispatch_message 分成 response事件 和 其他事件 这两个部分来分析&lt;/p>
&lt;h3 id="response事件">response事件
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> if prototype == 1 then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local co = session_id_coroutine[session]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if co == &amp;#34;BREAK&amp;#34; then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session_id_coroutine[session] = nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> elseif co == nil then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> unknown_response(session, source, msg, sz)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local tag = session_coroutine_tracetag[co]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if tag then c.trace(tag, &amp;#34;resume&amp;#34;) end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session_id_coroutine[session] = nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> suspend(co, coroutine_resume(co, true, msg, sz, session))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>response事件 通过session 来找到对应的执行协程，如果协程是不存在或者是处于&amp;quot;BREAK&amp;quot;的状态的话，则执行对应的错误处理。否则就通过 session_id_coroutine 找到对应四鹅城，将消息数据传入协程，然后让其继续执行即可。同时这边也可以推测，lua层有调用skynet的框架的API时，应该都会将自身协程挂起，等待dispatch回来后再继续处理。&lt;/p>
&lt;h3 id="其他类型的协议处理">其他类型的协议处理
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local p = proto[prototype]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 先查以下proto中是否有对应类型的数据，如果没有的话则进行错误处理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if p == nil then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local f = p.dispatch
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if f then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 新建协程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local co = co_create(f)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session_coroutine_id[co] = session
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session_coroutine_address[co] = source -- 记录来源
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 如果开了traceflag，就会处理记录source到本服务的事件记录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local traceflag = p.trace
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> suspend(co, coroutine_resume(co, session,source, p.unpack(msg,sz))) -- 执行调度
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 如果注册的协议没有对应的处理函数，则也执行错误处理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其他事件处理的情况时，首先会查找一下对应协议类型是否有注册过，以及是否有对应的执行函数。调用前会判断对应的协议是否开启了记录，便于debug。最后也是创建协程来执行对应的调度函数。所以可以知道lua层在处理skynet的消息时，都是采用协程的方式进行执行的。&lt;/p>
&lt;h2 id="注册协议类型">注册协议类型
&lt;/h2>&lt;h3 id="skynetregister_protocol">skynet.register_protocol
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">function skynet.register_protocol(class)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local name = class.name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local id = class.id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(proto[name] == nil and proto[id] == nil)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(type(name) == &amp;#34;string&amp;#34; and type(id) == &amp;#34;number&amp;#34; and id &amp;gt;=0 and id &amp;lt;=255)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proto[name] = class
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proto[id] = class
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local REG = skynet.register_protocol
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> REG {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name = &amp;#34;lua&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id = skynet.PTYPE_LUA,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pack = skynet.pack,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> unpack = skynet.unpack,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> REG {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name = &amp;#34;response&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id = skynet.PTYPE_RESPONSE,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> REG {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name = &amp;#34;error&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id = skynet.PTYPE_ERROR,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> unpack = function(...) return ... end,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dispatch = _error_dispatch,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注册协议通过 register_protocol 来进行注册，传入的table中必须含有id 和 name，且不能和之前注册过的重复。&lt;/p>
&lt;p>由skynet自身注册协议中可以看到，对应一个类型来说，还需要处理对应类型的 序列化和反序列化函数，以及处理函数。&lt;/p>
&lt;h2 id="消息回包">消息回包
&lt;/h2>&lt;h3 id="skynetret-和-skynetresponse">skynet.ret 和 skynet.response
&lt;/h3>&lt;p>skynet.ret 和 skynet.response 都是对请求进行回包，但区别在于&lt;/p>
&lt;ul>
&lt;li>skynet.ret 传入msg 和 sz，直接就给来源服务回包，并且多次调用会产生异常&lt;/li>
&lt;li>skynet.response 调用的时候会返回一个闭包f，之后通过这个闭包f进行回包，回包的时候传入的是需要回包的对象，f回自动进行序列化。这个函数的主要目的是为了函数处理的时候可能需要等待其他事件触发从而被挂起了，而等时机满足的时候，已经是其他coroutine了。&lt;/li>
&lt;/ul>
&lt;h2 id="协程调度">协程调度
&lt;/h2>&lt;h3 id="skynet-协程挂起">skynet 协程挂起
&lt;/h3>&lt;p>外部协程在跑的过程中，可以使用 skynet.wait 或者 skynet.sleep 来挂起协程。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">function skynet.wait(token)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local session = c.genid()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> token = token or coroutine.running()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> suspend_sleep(session, token) -- 这边是挂起协程的入口
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 到这边已经是协程恢复了，删除保存的索引
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sleep_session[token] = nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session_id_coroutine[session] = nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function skynet.sleep(ti, token)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local session = c.intcommand(&amp;#34;TIMEOUT&amp;#34;,ti)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(session)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> token = token or coroutine.running()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local succ, ret = suspend_sleep(session, token) -- 这边是挂起协程的入口
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 到这边已经是协程恢复了，删除保存的索引
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sleep_session[token] = nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if succ then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if ret == &amp;#34;BREAK&amp;#34; then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#34;BREAK&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> error(ret)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">local function suspend_sleep(session, token)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local tag = session_coroutine_tracetag[running_thread] -- 获取当前的tracetag，如果有的话，就输出当前协程的切换行为
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if tag then c.trace(tag, &amp;#34;sleep&amp;#34;, 2) end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session_id_coroutine[session] = running_thread -- 将session 和 协程绑定
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(sleep_session[token] == nil, &amp;#34;token duplicative&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sleep_session[token] = session -- token 和session 绑定
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return coroutine_yield &amp;#34;SUSPEND&amp;#34; -- 挂起协程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>skynet.sleep 和 skynet.wait 最后调用的都是 suspend_sleep 这个接口要求传入session 和 token，session 时调用接口的时候立即产生的。而token如果用户不指定的话则默认使用协程的地址作为token。 token的目的是用来索引到session的，而session用来索引到具体的协程。 suspend_sleep 最后调用 coroutine_yield 来完成协程挂起&lt;/p>
&lt;p>coroutine_yield 直接就是lua原生的 coroutine.yield，那么挂起之后线程就会回到调用协程最开始的位置，这边探究的时候，先简单认为回到上面处理消息的位置&lt;/p>
&lt;h3 id="coroutine_resume">coroutine_resume
&lt;/h3>&lt;p>将 running_thread 设置成要运行的协程，然后调用原生的 cresume&lt;/p>
&lt;h3 id="suspend">suspend
&lt;/h3>&lt;p>协程挂起之后，下一步就变成调用 suspend 函数，相当于&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">suspend(co, &amp;#34;SUSPEND&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>具体看看 suspend 处理了什么情况&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">function suspend(co, result, command)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if not result then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local session = session_coroutine_id[co]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 错误处理，涉及到一些日志以及协程的关闭操作
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> error(tb) -- 引发trace
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if command == &amp;#34;SUSPEND&amp;#34; then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return dispatch_wakeup()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> elseif command == &amp;#34;QUIT&amp;#34; then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> coroutine.close(co)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- service exit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> elseif command == &amp;#34;USER&amp;#34; then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- See skynet.coutine for detail
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> error(&amp;#34;Call skynet.coroutine.yield out of skynet.coroutine.resume\n&amp;#34; .. traceback(co))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> elseif command == nil then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- debug trace
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> error(&amp;#34;Unknown command : &amp;#34; .. command .. &amp;#34;\n&amp;#34; .. traceback(co))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>suspend 传入的参数分别是协程，协程是否执行成功，协程返回的内容。&lt;/p>
&lt;ul>
&lt;li>如果执行失败，则会对协程执行清理操作，输出日志等行为&lt;/li>
&lt;li>如果返回的命令是 SUSPEND, 则调用 dispatch_wakeup，这个函数是用打断一些可被唤醒的协程这边会尽可能快速的唤醒&lt;/li>
&lt;li>如果返回的命令是 QUIT，则执行清理操作&lt;/li>
&lt;li>返回的其他任何命令也都是错误处理，不过值得注意的是 &amp;ldquo;USER&amp;rdquo; 的话，应该是在错误使用了skynet.coroutine的结果&lt;/li>
&lt;/ul>
&lt;h2 id="消息推送-和-远程调用">消息推送 和 远程调用
&lt;/h2>&lt;p>这边主要分析 skynet.call 和 skynet.send 这两个API&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">function skynet.call(addr, typename, ...)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local tag = session_coroutine_tracetag[running_thread] -- 是否开启trace监控
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if tag then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> c.trace(tag, &amp;#34;call&amp;#34;, 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> c.send(addr, skynet.PTYPE_TRACE, 0, tag)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local p = proto[typename]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local session = c.send(addr, p.id , nil , p.pack(...)) -- 用对应proto的pack对数据进行打包。然后调用c.send
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if session == nil then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> error(&amp;#34;call to invalid address &amp;#34; .. skynet.address(addr))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return p.unpack(yield_call(addr, session)) -- 主动放弃协程控制权，等待对方回包。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function skynet.send(addr, typename, ...)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local p = proto[typename]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return c.send(addr, p.id, 0 , p.pack(...))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以很明显的看出，skynet.call 和 skynet.send 这两个API的区别就是在于是否会主动放弃当前协程的控制权&lt;/p>
&lt;h1 id="小结">小结
&lt;/h1>&lt;p>这边对常用API进行了一个源码层面的梳理，其实代码并不会特别复杂，只是上述代码都放在一个文件内，进行完整的梳理会比较容易绕晕。对这些代码进行梳理我认为主要还是更能明白代码是以什么方式执行的，出现BUG的时候也能更快速定位BUG以及确认BUG影响的范围。&lt;/p></description></item><item><title>Skynet源码阅读笔记(十一)-Bootstrap 与 cmaster/cslave</title><link>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E4%B8%80-bootstrap-%E4%B8%8E-cmaster/cslave/</link><pubDate>Tue, 13 Aug 2024 00:00:00 +0000</pubDate><guid>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E4%B8%80-bootstrap-%E4%B8%8E-cmaster/cslave/</guid><description>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81%E4%B8%80-bootstrap-%E4%B8%8E-cmaster/cslave/skynet.png" alt="Featured image of post Skynet源码阅读笔记(十一)-Bootstrap 与 cmaster/cslave" />&lt;h1 id="bootstrap">Bootstrap
&lt;/h1>&lt;p>bootstrap是skynet默认初始化第一个执行的lua文件，上一遍在梳理snlua的过程中，知道了snlua是如何在初始化的时候执行到lua层的代码的，那接下来就看看在初始化时bootstrap具体的过程。&lt;/p>
&lt;h2 id="bootstraplua">bootstrap.lua
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">skynet.start(function()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local launcher = assert(skynet.launch(&amp;#34;snlua&amp;#34;,&amp;#34;launcher&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.name(&amp;#34;.launcher&amp;#34;, launcher)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local standalone = skynet.getenv &amp;#34;standalone&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local harbor_id = tonumber(skynet.getenv &amp;#34;harbor&amp;#34; or 0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if harbor_id == 0 then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 这边是单节点模式启动
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(standalone == nil)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> standalone = true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.setenv(&amp;#34;standalone&amp;#34;, &amp;#34;true&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 用cdummy 来代替cslave
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local ok, slave = pcall(skynet.newservice, &amp;#34;cdummy&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if not ok then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.abort()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.name(&amp;#34;.cslave&amp;#34;, slave)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 这边是多节点模式
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if standalone then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 如果standalone有配置，则需要启动cmaster
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if not pcall(skynet.newservice,&amp;#34;cmaster&amp;#34;) then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.abort()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 无论什么类型，cslave一定都有
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local ok, slave = pcall(skynet.newservice, &amp;#34;cslave&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if not ok then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.abort()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.name(&amp;#34;.cslave&amp;#34;, slave)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 这边还需要给master节点启动datecenter
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if standalone then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local datacenter = skynet.newservice &amp;#34;datacenterd&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.name(&amp;#34;DATACENTER&amp;#34;, datacenter)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.newservice &amp;#34;service_mgr&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ....
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 启动用户自定义的脚本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pcall(skynet.newservice,skynet.getenv &amp;#34;start&amp;#34; or &amp;#34;main&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.exit()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>先启动一个launcher的服务&lt;/li>
&lt;li>bootstrap 根据配置中是否配置了 harbor 来分成两个模式
&lt;ul>
&lt;li>如果配置了没harbor，那么就一定是以单节点的方式启动，当前进程会额外启动一个cdummy的服务作为 cslave&lt;/li>
&lt;li>如果配置了harbor，那么还需要根据配置判断standlalone来判断是否启动 cmaster 服务 和 datecenter 服务；配置了harbor的节点一定会启动 cslave 服务&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>无论什么模式，最后根据配置获取start 或者 main 脚本 来启动业务服务，然后本服务退出&lt;/li>
&lt;/ol>
&lt;h2 id="cmaster--cslave">cmaster / cslave
&lt;/h2>&lt;p>cmaster / cslave 这边的源码就不具体分析了&lt;/p>
&lt;h3 id="cmaster">cmaster
&lt;/h3>&lt;p>cmaster 和 cslave 在 &lt;a class="link" href="https://github.com/cloudwu/skynet/wiki/Cluster" target="_blank" rel="noopener"
>https://github.com/cloudwu/skynet/wiki/Cluster&lt;/a> 中也有介绍，主要是用来局域网内的多节点之间的一个使用方式&lt;/p>
&lt;p>master主要管理slave的节点信息，包括地址和名字等。主要的协议交互如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="o">--&lt;/span>&lt;span class="p">[[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">master&lt;/span> &lt;span class="nx">manage&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mf">1.&lt;/span> &lt;span class="nx">all&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">slaves&lt;/span> &lt;span class="nx">address&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">ipaddr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">port&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mf">2.&lt;/span> &lt;span class="nx">all&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">global&lt;/span> &lt;span class="nx">names&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">address&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">master&lt;/span> &lt;span class="nx">hold&lt;/span> &lt;span class="nx">connections&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="nx">slaves&lt;/span> &lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">protocol&lt;/span> &lt;span class="nx">slave&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">master&lt;/span> &lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">package&lt;/span> &lt;span class="nx">size&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="kt">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">type&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="kt">byte&lt;/span> &lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sc">&amp;#39;H&amp;#39;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nx">HANDSHAKE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">report&lt;/span> &lt;span class="nx">slave&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">and&lt;/span> &lt;span class="nx">address&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sc">&amp;#39;R&amp;#39;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nx">REGISTER&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="nx">address&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sc">&amp;#39;Q&amp;#39;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nx">QUERY&lt;/span> &lt;span class="nx">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">protocol&lt;/span> &lt;span class="nx">master&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">slave&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">package&lt;/span> &lt;span class="nx">size&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="kt">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">type&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="kt">byte&lt;/span> &lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sc">&amp;#39;W&amp;#39;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nx">WAIT&lt;/span> &lt;span class="nx">n&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sc">&amp;#39;C&amp;#39;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nx">CONNECT&lt;/span> &lt;span class="nx">slave_id&lt;/span> &lt;span class="nx">slave_address&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sc">&amp;#39;N&amp;#39;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nx">NAME&lt;/span> &lt;span class="nx">globalname&lt;/span> &lt;span class="nx">address&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sc">&amp;#39;D&amp;#39;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nx">DISCONNECT&lt;/span> &lt;span class="nx">slave_id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>master的启动过程如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">skynet.start(function()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local master_addr = skynet.getenv &amp;#34;standalone&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.error(&amp;#34;master listen socket &amp;#34; .. tostring(master_addr))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local fd = socket.listen(master_addr) -- 监听对应端口
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> socket.start(fd , function(id, addr) -- 在连接进来的时候，执行这个函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.error(&amp;#34;connect from &amp;#34; .. addr .. &amp;#34; &amp;#34; .. id)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> socket.start(id)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local ok, slave, slave_addr = pcall(handshake, id) -- 先进行handshake进行握手
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if ok then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.fork(monitor_slave, slave, slave_addr) -- 成功了之后在创建协程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 否则关闭连接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.error(string.format(&amp;#34;disconnect fd = %d, error = %s&amp;#34;, id, slave))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> socket.close(id)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>master在启动的时候会通过监听 standalone 配置的地址来等待slave的注册信息。&lt;/p>
&lt;h3 id="handshake函数">handshake函数
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">local function handshake(fd)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local t, slave_id, slave_addr = read_package(fd)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(t==&amp;#39;H&amp;#39;, &amp;#34;Invalid handshake type &amp;#34; .. t)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(slave_id ~= 0 , &amp;#34;Invalid slave id 0&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if slave_node[slave_id] then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> error(string.format(&amp;#34;Slave %d already register on %s&amp;#34;, slave_id, slave_node[slave_id].addr))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> report_slave(fd, slave_id, slave_addr) -- 这边会广播给其他slave
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> slave_node[slave_id] = { -- 保存slave对应的数据
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fd = fd,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id = slave_id,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addr = slave_addr,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return slave_id , slave_addr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在slave连接上来之后，master首先会执行handshake与slave进行握手，并广播给当前的slave信息广播给其他slave节点。之后会创建一个单独的协程来执行 monitor_slave 与slave进行协议的交互。&lt;/p>
&lt;h3 id="monitor_slave">monitor_slave
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">local function monitor_slave(slave_id, slave_address)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local fd = slave_node[slave_id].fd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.error(string.format(&amp;#34;Harbor %d (fd=%d) report %s&amp;#34;, slave_id, fd, slave_address))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> while pcall(dispatch_slave, fd) do end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.error(&amp;#34;slave &amp;#34; ..slave_id .. &amp;#34; is down&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local message = pack_package(&amp;#34;D&amp;#34;, slave_id)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> slave_node[slave_id].fd = 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for k,v in pairs(slave_node) do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> socket.write(v.fd, message)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> socket.close(fd)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>monitor_slave 就是协程不停的调用dispatch_slave 来处理slave的消息，知道slave关闭为止。 而dispatch_slave中就是具体的协议处理了，这边就不继续展开了。&lt;/p>
&lt;h3 id="cslave">cslave
&lt;/h3>&lt;p>clave 就会稍微复杂一点了。&lt;/p>
&lt;ol>
&lt;li>在服务启动的时候，会通过配置先获取master的地址，并打开自己的端口进行的监听。&lt;/li>
&lt;li>注册自身的dispatch消息处理函数，这个函数会尝试在harbor这个table中查找对应的函数并执行。同时创建一个harbor的service。&lt;/li>
&lt;li>开始与master进行连接，连接上之后创建一个协程用来处理与master的数据交互&lt;/li>
&lt;li>master连接之后会发送一个等待协议，让当前slave等待之前的N个slave与自己连接。当完成之后，创建slave的协程就退出。后面依赖第3步创建的协议与新的slave进行连接。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">skynet.start(function()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 在服务启动的时候，会通过配置先获取master的地址，并打开自己的端口进行的监听。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local master_addr = skynet.getenv &amp;#34;master&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local harbor_id = tonumber(skynet.getenv &amp;#34;harbor&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local slave_address = assert(skynet.getenv &amp;#34;address&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local slave_fd = socket.listen(slave_address)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.error(&amp;#34;slave connect to master &amp;#34; .. tostring(master_addr))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local master_fd = assert(socket.open(master_addr), &amp;#34;Can&amp;#39;t connect to master&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 注册自身的dispatch消息处理函数，这个函数会尝试在harbor这个table中查找对应的函数并执行。同时创建一个harbor的service。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.dispatch(&amp;#34;lua&amp;#34;, function (_,_,command,...)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local f = assert(harbor[command])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> f(master_fd, ...)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.dispatch(&amp;#34;text&amp;#34;, monitor_harbor(master_fd))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> harbor_service = assert(skynet.launch(&amp;#34;harbor&amp;#34;, harbor_id, skynet.self()))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 开始与master进行连接，连接上之后创建一个协程用来处理与master的数据交互
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local hs_message = pack_package(&amp;#34;H&amp;#34;, harbor_id, slave_address)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> socket.write(master_fd, hs_message)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local t, n = read_package(master_fd)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(t == &amp;#34;W&amp;#34; and type(n) == &amp;#34;number&amp;#34;, &amp;#34;slave shakehand failed&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.error(string.format(&amp;#34;Waiting for %d harbors&amp;#34;, n))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.fork(monitor_master, master_fd)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- master连接之后会发送一个等待协议，让当前slave等待之前的N个slave与自己连接。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if n &amp;gt; 0 then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local co = coroutine.running()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> socket.start(slave_fd, function(fd, addr)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.error(string.format(&amp;#34;New connection (fd = %d, %s)&amp;#34;,fd, addr))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> socketdriver.nodelay(fd)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if pcall(accept_slave,fd) then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> local s = 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for k,v in pairs(slaves) do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s = s + 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if s &amp;gt;= n then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.wakeup(co) -- 全部完成了之后唤醒创建slave的协程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.wait() --等待其他slave的连接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- 当完成之后，创建slave的协程就退出。后面依赖第3步创建的协议与新的slave进行连接。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> socket.close(slave_fd)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.error(&amp;#34;Shakehand ready&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.fork(ready)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="harbor服务">harbor服务
&lt;/h3>&lt;p>这个服务主要就是用来转发数据到slave中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">local skynet = require &amp;#34;skynet&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">local harbor = {}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function harbor.globalname(name, handle)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> handle = handle or skynet.self()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.send(&amp;#34;.cslave&amp;#34;, &amp;#34;lua&amp;#34;, &amp;#34;REGISTER&amp;#34;, name, handle)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function harbor.queryname(name)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return skynet.call(&amp;#34;.cslave&amp;#34;, &amp;#34;lua&amp;#34;, &amp;#34;QUERYNAME&amp;#34;, name)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function harbor.link(id)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.call(&amp;#34;.cslave&amp;#34;, &amp;#34;lua&amp;#34;, &amp;#34;LINK&amp;#34;, id)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function harbor.connect(id)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.call(&amp;#34;.cslave&amp;#34;, &amp;#34;lua&amp;#34;, &amp;#34;CONNECT&amp;#34;, id)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function harbor.linkmaster()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet.call(&amp;#34;.cslave&amp;#34;, &amp;#34;lua&amp;#34;, &amp;#34;LINKMASTER&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">return harbor
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到就是包装了一层到slave的调用而已。&lt;/p>
&lt;h2 id="小结">小结
&lt;/h2>&lt;p>这边稍微探究了一下skynet bootstrap的启动过程中具体是做了什么，以及对应master/slave模式具体是干了什么事情。不过在代码里面可以看到很多skynet.xxx的调用。接下来就要具体看看skynet.lua中具体是如何处理消息的了。&lt;/p></description></item><item><title>Skynet源码阅读笔记(十)- Snlua 服务</title><link>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81-snlua-%E6%9C%8D%E5%8A%A1/</link><pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate><guid>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81-snlua-%E6%9C%8D%E5%8A%A1/</guid><description>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8D%81-snlua-%E6%9C%8D%E5%8A%A1/skynet.png" alt="Featured image of post Skynet源码阅读笔记(十)- Snlua 服务" />&lt;h1 id="skynet源码阅读笔记-snlua服务">Skynet源码阅读笔记-Snlua服务
&lt;/h1>&lt;p>snlua 服务是 skynet 中重要的服务之一，其主要功能是为了创建一个执行lua代码的服务, skynet在默认情况下执行的第一个服务就是 snlua bootstrap&lt;/p>
&lt;p>先看看其主要的的数据结构&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">struct&lt;/span> &lt;span class="n">snlua&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_State&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">L&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">lua&lt;/span> &lt;span class="err">服务的主线程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">skynet服务的上下文&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">size_t&lt;/span> &lt;span class="n">mem&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">目前的内存使用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">size_t&lt;/span> &lt;span class="n">mem_report&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">内存警报阈值&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">size_t&lt;/span> &lt;span class="n">mem_limit&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">内存使用上限&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_State&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">activeL&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">当前的活跃的&lt;/span>&lt;span class="n">lua&lt;/span> &lt;span class="err">线程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ATOM_INT&lt;/span> &lt;span class="n">trap&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">标记设置&lt;/span>&lt;span class="n">signal_hook&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>之前在skynet_module中曾经提到过，创建一个新的服务时，对应的服务需要实现4个函数，用于初始化和释放&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_module&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">名字&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">module&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">module的地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_dl_create&lt;/span> &lt;span class="n">create&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">创建&lt;/span>&lt;span class="n">module实例执行的函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_dl_init&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">初始化&lt;/span>&lt;span class="n">module执行的函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_dl_release&lt;/span> &lt;span class="n">release&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">释放&lt;/span>&lt;span class="n">module执行函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_dl_signal&lt;/span> &lt;span class="k">signal&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">module信号执行函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当skynet在初始化的时候，执行的第一个snlua的服务是snlua bootstrap, 以这个为例子看看snlua中对应的函数是如何实现的。&lt;/p>
&lt;h2 id="snlua_create">snlua_create
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">struct snlua *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">snlua_create(void) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct snlua * l = skynet_malloc(sizeof(*l));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memset(l,0,sizeof(*l));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> l-&amp;gt;mem_report = MEMORY_WARNING_REPORT;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> l-&amp;gt;mem_limit = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> l-&amp;gt;L = lua_newstate(lalloc, l);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> l-&amp;gt;activeL = NULL;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ATOM_INIT(&amp;amp;l-&amp;gt;trap , 0);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return l;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>snlua的创建函数，可以只是对上述属性进行一个简单的初始化操作，可以注意到在lua_newstate的时候传入了一个lalloc, 在这边对lua内存分配做了一个自定义的行为。&lt;/p>
&lt;h3 id="lalloc">lalloc
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">static void *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lalloc(void * ud, void *ptr, size_t osize, size_t nsize) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct snlua *l = ud;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> size_t mem = l-&amp;gt;mem;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> l-&amp;gt;mem += nsize;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (ptr)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> l-&amp;gt;mem -= osize;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (l-&amp;gt;mem_limit != 0 &amp;amp;&amp;amp; l-&amp;gt;mem &amp;gt; l-&amp;gt;mem_limit) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (ptr == NULL || nsize &amp;gt; osize) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> l-&amp;gt;mem = mem;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return NULL;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (l-&amp;gt;mem &amp;gt; l-&amp;gt;mem_report) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> l-&amp;gt;mem_report *= 2;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_error(l-&amp;gt;ctx, &amp;#34;Memory warning %.2f M&amp;#34;, (float)l-&amp;gt;mem / (1024 * 1024));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return skynet_lalloc(ptr, osize, nsize);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>lalloc 中主要干了两件事情&lt;/p>
&lt;ol>
&lt;li>对内存的分配进行了监控，超过一定限制会输出日志报警&lt;/li>
&lt;li>调用skynet_lalloc来实际分配内存，这边先不展开，不过skynet_lalloc中使用的是jemalloc来对内存进行分配。&lt;/li>
&lt;/ol>
&lt;h2 id="snlua_init">snlua_init
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="ne">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">snlua_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">struct&lt;/span> &lt;span class="n">snlua&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">先把参数拷贝出来&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">sz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">tmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sz&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tmp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sz&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">args&lt;/span> &lt;span class="err">这边是&lt;/span>&lt;span class="n">bootstrap&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">launch_cb&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">设置消息回调的接口和&lt;/span>&lt;span class="n">userData&lt;/span>&lt;span class="err">，这边设置进行去的&lt;/span>&lt;span class="n">ud是&lt;/span> &lt;span class="n">l&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">调用&lt;/span>&lt;span class="n">REG&lt;/span> &lt;span class="err">来获取&lt;/span>&lt;span class="n">handle_id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="bp">self&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;REG&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">handle_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strtoul&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="n">must&lt;/span> &lt;span class="n">be&lt;/span> &lt;span class="n">first&lt;/span> &lt;span class="n">message&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">handle_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PTYPE_TAG_DONTCOPY&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sz&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">通过给自己发送一条消息的方式来触发后续的初始化操作&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>init流程看似也很简单，但实际上是为了调用skynet_send来给自己发送一条消息，用消息回调的方式来触发剩余的初始化操作。
不过为啥要用回调的方式以及为啥这个消息必须是第一条，我目前没有理解。&lt;/p>
&lt;h3 id="launch_cb">launch_cb
&lt;/h3>&lt;p>消息回调的时候首先调用的是launch_cb，在init的时候已经通过skynet_callback将ud和launch_cb设置到消息回调中了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="ne">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">launch_cb&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ud&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">session&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">source&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">sz&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">session&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">snlua&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">l&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ud&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">这边又将回调的接口给重置了&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">err&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">init_cb&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sz&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">真正的初始化位置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;EXIT&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>launch_cb 也只是用来包装调用init_cb，自身只是处理了如果init_cb出错了，就调用EXIT指令卸载掉当前的服务&lt;/p>
&lt;h3 id="init_cb">init_cb
&lt;/h3>&lt;p>init_cb 中就是初始化snlua服务的主要流程了，主要是 hook一些协程接口、处理路径相关、加载执行lua文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="ne">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">init_cb&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">struct&lt;/span> &lt;span class="n">snlua&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">sz&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_State&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">L&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">l&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_gc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LUA_GCSTOP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">GC&lt;/span> &lt;span class="n">STOP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_pushboolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">/*&lt;/span> &lt;span class="k">signal&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">libraries&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">ignore&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span> &lt;span class="n">vars&lt;/span>&lt;span class="o">.&lt;/span> &lt;span class="o">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_setfield&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LUA_REGISTRYINDEX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;LUA_NOENV&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">跳过&lt;/span>&lt;span class="n">LUA_PATH和LUA_CPATH&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">luaL_openlibs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">luaL_requiref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;skynet.profile&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">init_profile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">require&lt;/span> &lt;span class="n">skynet&lt;/span> &lt;span class="n">profile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">hook&lt;/span> &lt;span class="n">coroutine相关接口&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">相当于下面的&lt;/span>&lt;span class="n">lua代码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">replace&lt;/span> &lt;span class="n">coroutine&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resume&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">coroutine&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wrap&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">coroutine&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">resume&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">profile_lib&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">resume&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">coroutine&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">wrap&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">profile_lib&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">wrap&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">相当于&lt;/span> &lt;span class="n">LUA_REGISTRYINDEX&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">skynet_context&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_getglobal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;coroutine&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_getfield&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">profile_lib&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;resume&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_setfield&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;resume&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_getfield&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">profile_lib&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;wrap&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_setfield&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;wrap&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">设置路径，如果配置有提供&lt;/span>&lt;span class="n">lua_path&lt;/span>&lt;span class="err">、&lt;/span>&lt;span class="n">lua_cpath&lt;/span>&lt;span class="err">、&lt;/span>&lt;span class="n">luaservice&lt;/span> &lt;span class="err">则使用配置的，&lt;/span> &lt;span class="err">否则使用默认的&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">optstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;lua_path&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;./lualib/?.lua;./lualib/?/init.lua&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">....&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">加载&lt;/span>&lt;span class="n">lua&lt;/span> &lt;span class="n">loader&lt;/span>&lt;span class="err">，&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_pushcfunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">traceback&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lua_gettop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">optstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;lualoader&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;./lualib/loader.lua&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">luaL_loadfile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">loader&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">LUA_OK&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Can&amp;#39;t load &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2"> : &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">loader&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lua_tostring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">report_launcher_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">pcall&lt;/span> &lt;span class="err">调用&lt;/span> &lt;span class="err">如果报错了，则把错误信息打印出来&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">这边一开始的&lt;/span>&lt;span class="n">args应该是&lt;/span> &lt;span class="n">bootstrap&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_pushlstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sz&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lua_pcall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">LUA_OK&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;lua loader error : &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lua_tostring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">report_launcher_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">如果&lt;/span> &lt;span class="n">LUA_REGISTRYINDEX&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">memlimit&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">有被设置的话，&lt;/span> &lt;span class="err">则更新&lt;/span>&lt;span class="n">mem_limit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lua_getfield&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LUA_REGISTRYINDEX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;memlimit&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">LUA_TNUMBER&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_gc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LUA_GCRESTART&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>init_cb 里面主要是使用了很多Lua的C API来执行了一系列操作，分为一下几个步骤&lt;/p>
&lt;ol>
&lt;li>替换掉系统的coroutine相关的操作&lt;/li>
&lt;li>将ctx设置到全局变量中，以便C 和 lua更好的交互&lt;/li>
&lt;li>设置require的路径&lt;/li>
&lt;li>加载 loader.lua&lt;/li>
&lt;li>调用 loader.lua args 。这边的args 内容最开始是 bootstrap.lua&lt;/li>
&lt;li>设置 memlimit&lt;/li>
&lt;/ol>
&lt;p>这边目前更关心 loader.lua bootstap 这个调用的过程&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="o">--&lt;/span> &lt;span class="n">skynet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">loader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lua&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">--&lt;/span> &lt;span class="err">其他更多是在处理配置路径相关的事情&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">--&lt;/span> &lt;span class="n">main&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bootstap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lua&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">snlua初始化的时候执行的是这个语句&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">--&lt;/span> &lt;span class="err">如果定义了&lt;/span>&lt;span class="n">LUA_PRELOAD&lt;/span>&lt;span class="err">，那么就先加载对应文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="n">LUA_PRELOAD&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">local&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">loadfile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LUA_PRELOAD&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">table&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">unpack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LUA_PRELOAD&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">_G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">require&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">require&lt;/span> &lt;span class="s2">&amp;#34;skynet.require&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">require&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="n">skynet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">require&lt;/span> &lt;span class="err">后续新开一个文档研究，这边可以认为是对于协程并行的一些处理，如果没有使用协程，那么这边就是普通的&lt;/span>&lt;span class="n">require&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">unpack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)))&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="err">这边就是执行服务的函数，&lt;/span>&lt;span class="n">main&lt;/span> &lt;span class="err">对应的函数就是&lt;/span>&lt;span class="n">loadfile进来的&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>loader.lua 中大部分都是处理服务路径相关的事情，需要注意的就是如果定义了LUA_PRELOAD，那么就会提前加载对应的模块。
顺便再提一嘴，main函数是通过 loadfile(targeServiceFile) 的结果。&lt;/p>
&lt;p>这边args再初始化加载的时候应该只有{bootstap}，所以main执行的时候是没有参数的。&lt;/p>
&lt;p>init的流程先到此为止，这边知道skynet snlua服务会在init_cb的时候通过loadfile的方式将lua服务加载进来就行了。&lt;/p>
&lt;p>之后具体的bootstrap流程还会具体在分析。这边先告一段落。&lt;/p>
&lt;p>后续看看snlua的另外几个操作&lt;/p>
&lt;h2 id="snlua_signal">snlua_signal
&lt;/h2>&lt;p>singla接口主要是为了能让其他线程给snlua服务在跑的过程发送一些信号，以达到一些自定义的需求。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">void&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">snlua_signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">struct&lt;/span> &lt;span class="n">snlua&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="k">signal&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;recv a signal &lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">signal&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">signal&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ATOM_LOAD&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">trap&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">only&lt;/span> &lt;span class="n">one&lt;/span> &lt;span class="n">thread&lt;/span> &lt;span class="n">can&lt;/span> &lt;span class="n">set&lt;/span> &lt;span class="n">trap&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">trap&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">ATOM_CAS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">trap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_sethook&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">activeL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">signal_hook&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LUA_MASKCOUNT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="err">相当于&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sethook&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signal_hook&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;count&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">finish&lt;/span> &lt;span class="n">set&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">trap&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ATOM_CAS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">trap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="err">设置成功了就将&lt;/span>&lt;span class="n">trap&lt;/span> &lt;span class="err">设置成&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">signal&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Current Memory &lt;/span>&lt;span class="si">%.3f&lt;/span>&lt;span class="s2">K&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="ne">float&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mem&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>snlua_signal目前只处理了两个信号事件&lt;/p>
&lt;ul>
&lt;li>当信号为1的时候，snlua会输出当前的内存使用&lt;/li>
&lt;li>当新号为0的时候，会执行 相当于 相当于debug.sethook(signal_hook, &amp;ldquo;count&amp;rdquo;, 1)的 语句，&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="n">void&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">signal_hook&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lua_State&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lua_Debug&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ar&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ud&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_getallocf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ud&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">snlua&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">l&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">struct&lt;/span> &lt;span class="n">snlua&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">ud&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_sethook&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ATOM_LOAD&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">trap&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ATOM_STORE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">trap&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="err">走到这边说明必定触发，则先将&lt;/span>&lt;span class="n">trap设置会0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">luaL_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;signal 0&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="err">抛出异常&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个signal_hook在执行的时候就会将hook解除，并立即抛出异常。&lt;/p>
&lt;p>还记得在分析线程作用的一章里，有谈到过关于死循环检查的事情吗，当在日志中发现存在死循环后，可以通过给snlua服务发送信号0的方式来打断它的执行，从而跳出死循环。&lt;/p>
&lt;h2 id="snlua_release">snlua_release
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">snlua_release(struct snlua *l) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> lua_close(l-&amp;gt;L);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_free(l);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>snlua_release 这边就很简单了，关闭lua的虚拟机、释放对应的内存即可&lt;/p>
&lt;h2 id="小结">小结
&lt;/h2>&lt;p>这边主要过了一下snlua服务中4个主要函数的大致实现。其中比较重要的就是初始化的过程和信号处理的过程。唯一还没理解的地方就是为啥snlua服务需要通过给自己发信息的方式来触发初始化过程。
snlua在init_cb的时候，代码就来到了lua层，后面就准备分析一些bootstrap.lua中做了什么事情。
其实snlua这边还有很大篇幅是有关协程调度的（只是hook了调度函数，用来做profile和信号打断的），在源码中定义在init_profile函数里，有机会在分析这块内容。&lt;/p></description></item><item><title>Skynet源码阅读笔记(八)-skynet的线程类型（三）</title><link>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%85%AB-skynet%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%B1%BB%E5%9E%8B%E4%B8%89/</link><pubDate>Tue, 16 Apr 2024 00:00:00 +0000</pubDate><guid>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%85%AB-skynet%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%B1%BB%E5%9E%8B%E4%B8%89/</guid><description>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%85%AB-skynet%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%B1%BB%E5%9E%8B%E4%B8%89/skynet.png" alt="Featured image of post Skynet源码阅读笔记(八)-skynet的线程类型（三）" />&lt;h1 id="skynet源码阅读笔记八-skynet的线程类型">Skynet源码阅读笔记(八)-skynet的线程类型
&lt;/h1>&lt;p>skynet中的线程类型可以分为一下几种类型&lt;/p>
&lt;ul>
&lt;li>主线程&lt;/li>
&lt;li>worker 线程&lt;/li>
&lt;li>timer 线程&lt;/li>
&lt;li>monitor 线程&lt;/li>
&lt;li>socket 线程&lt;/li>
&lt;/ul>
&lt;p>这些线程的初始化都在start函数里，由主线程驱动&lt;/p>
&lt;h2 id="socket线程">socket线程
&lt;/h2>&lt;p>从start函数中进入，可以看到初始化socket线程执行的是thread_socket函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">static void *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">thread_socket(void *p) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct monitor * m = p;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_initthread(THREAD_SOCKET);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (;;) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int r = skynet_socket_poll();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (r==0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> break;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (r&amp;lt;0) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CHECK_ABORT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> continue;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wakeup(m,0);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return NULL;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">int
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_socket_poll() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct socket_server *ss = SOCKET_SERVER;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(ss);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct socket_message result;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int more = 1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int type = socket_server_poll(ss, &amp;amp;result, &amp;amp;more);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> switch (type) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> case SOCKET_EXIT:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ..........
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> default:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_error(NULL, &amp;#34;Unknown socket message type %d.&amp;#34;,type);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return -1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (more) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return -1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return 1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这边可以看出现线程一直执行的是skynet_socket_poll，而对于返回值r，正常关机执行时返回0；出现异常返回小于0；其他情况则尝试唤醒睡眠的work进程，这边唤醒睡眠线程的条件是当所有work线程都在睡眠的时候。&lt;/p>
&lt;p>skynet_socket_poll 中则是对 socket_server_poll 的包装调用，根绝socket_server_poll返回的type执行对应操作。&lt;/p>
&lt;h2 id="socket_server">socket_server
&lt;/h2>&lt;p>在具体看 socket_server_poll 之前，先看看 socket_server 这个数据结构。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">struct socket_server {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volatile uint64_t time; // 创建socket_server的时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int reserve_fd; // 为了处理accept返回emfile错误码造成的问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int recvctrl_fd; // 管道的读端
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int sendctrl_fd; // 管道的写端
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int checkctrl; // 是否需要检查管道命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> poll_fd event_fd; // epoll的fd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ATOM_INT alloc_id; // 下一个socket的ID，多个线程都有可能同时调用，所以是一个原子类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int event_n; // epoll_wait返回的事件数量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int event_index; // 当前处理的epoll事件index
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct socket_object_interface soi; // 能够让数据自定义使用buffer的构造和释放
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct event ev[MAX_EVENT]; // 对epoll_event 的一个封装
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct socket slot[MAX_SOCKET]; // skynet包装的socket对象，因为是个数组，所以分配内存的时候直接分配好了
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> char buffer[MAX_INFO]; // 在TCP环境下通用的临时缓冲区
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint8_t udpbuffer[MAX_UDP_PACKAGE]; // 在UDP环境下通用的临时缓冲区
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fd_set rfds; // 用于select，主要就是判断recvctrl_fd是否有事件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>socket_server 结构就是整个socket 服务的核心了。 从结构上看它包装了对epoll使用和对socket的读写。接下来看看初始化它的时候做了些什么操作&lt;/p>
&lt;h3 id="socket_server的初始化">socket_server的初始化
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_socket_init() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SOCKET_SERVER = socket_server_create(skynet_now());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">struct socket_server *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">socket_server_create(uint64_t time) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int i;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int fd[2];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> poll_fd efd = sp_create(); // 这个函数包装了对epoll_create的调用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .... // efd的异常处理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (pipe(fd)) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ... // 失败的异常处理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (sp_add(efd, fd[0], NULL)) // 这边把读端放入到了epoll中, sp_add看起来只有LT模式
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ... // 失败的异常处理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct socket_server *ss = MALLOC(sizeof(*ss));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ss-&amp;gt;time = time; // 设置了socket的启动时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ss-&amp;gt;event_fd = efd;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ss-&amp;gt;recvctrl_fd = fd[0];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ss-&amp;gt;sendctrl_fd = fd[1];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ss-&amp;gt;checkctrl = 1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 主要是为了处理accpet的时候，fd不够导致无法关闭连接的情况
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // https://stackoverflow.com/questions/47179793/how-to-gracefully-handle-accept-giving-emfile-and-close-the-connection
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ss-&amp;gt;reserve_fd = dup(1); // reserve an extra fd for EMFILE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (i=0;i&amp;lt;MAX_SOCKET;i++) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 初始化socket数组内的所有socket
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct socket *s = &amp;amp;ss-&amp;gt;slot[i];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ATOM_INIT(&amp;amp;s-&amp;gt;type, SOCKET_TYPE_INVALID);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 初始化剩下的变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ATOM_INIT(&amp;amp;ss-&amp;gt;alloc_id , 0);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ss-&amp;gt;event_n = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ss-&amp;gt;event_index = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memset(&amp;amp;ss-&amp;gt;soi, 0, sizeof(ss-&amp;gt;soi));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FD_ZERO(&amp;amp;ss-&amp;gt;rfds);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(ss-&amp;gt;recvctrl_fd &amp;lt; FD_SETSIZE);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ss;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>skynet_socket_init 是在skynet_start中被调用的，初始化操作中并没有做什么特殊的操作，基本上可以认为是内存的申请和对数据的清空操作，只有reserve_fd是被预留处理特殊情况的时候使用。&lt;/p>
&lt;h3 id="当在lua中调用了listen">当在lua中调用了listen
&lt;/h3>&lt;p>在skynet中，提供了lua 层调用socket的方法，实现在 lua-socket.c 中，lua可以require socket后进行调用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="o">--&lt;/span> &lt;span class="n">lua&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">local&lt;/span> &lt;span class="n">socket&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">require&lt;/span> &lt;span class="s2">&amp;#34;skynet.socket&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">local&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">socket&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;0.0.0.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8001&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="ne">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">llisten&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lua_State&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">获取&lt;/span>&lt;span class="n">lua的对象&lt;/span>&lt;span class="err">，然后获取其中的数据&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">host&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">luaL_checkstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">luaL_checkinteger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">backlog&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">luaL_optinteger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">BACKLOG&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lua_touserdata&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lua_upvalueindex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">调用真正的&lt;/span>&lt;span class="n">listen函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_socket_listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">port&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">backlog&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">luaL_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Listen error&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">把结果在还给&lt;/span>&lt;span class="n">lua&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_pushinteger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以 listen 为例子，当lua脚本中调用了 socket.listen，那么相当于在C中调用了 skynet_socket_listen&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="ne">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">skynet_socket_listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">backlog&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">source&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_context_handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">获取对应&lt;/span>&lt;span class="n">context的handle&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">socket_server_listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SOCKET_SERVER&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">backlog&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="ne">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">socket_server_listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">struct&lt;/span> &lt;span class="n">socket_server&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ss&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uintptr_t&lt;/span> &lt;span class="n">opaque&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">backlog&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">backlog&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">函数包装了完整的的从&lt;/span>&lt;span class="n">socket的创建到listen结束&lt;/span>&lt;span class="err">，&lt;/span> &lt;span class="n">socket有设置&lt;/span> &lt;span class="n">SO_REUSEADDR&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">request_package&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">reserve_id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ss&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">分配&lt;/span>&lt;span class="n">socket_server&lt;/span> &lt;span class="err">的&lt;/span> &lt;span class="n">socket对象的数组下标&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">包装消息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listen&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">opaque&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">opaque&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">这个字段被赋值成了对应服务的&lt;/span>&lt;span class="n">handle&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listen&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">这个字段被赋值成了&lt;/span>&lt;span class="n">socket_server&lt;/span> &lt;span class="err">的&lt;/span> &lt;span class="n">socket对象的数组下标&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listen&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">这个字段被赋值成了真正的&lt;/span>&lt;span class="n">socket&lt;/span> &lt;span class="n">fd&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">send_request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ss&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;L&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listen&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="o">//&lt;/span>&lt;span class="err">发送消息给&lt;/span>&lt;span class="n">socket_server&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="ne">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">reserve_id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">struct&lt;/span> &lt;span class="n">socket_server&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ss&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MAX_SOCKET&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">原子的加减分配&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="err">，保证落在&lt;/span>&lt;span class="n">int范围内&lt;/span>&lt;span class="err">，&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ATOM_FINC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ss&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">alloc_id&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ATOM_FAND&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ss&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">alloc_id&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mh">0x7fffffff&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x7fffffff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">socket&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ss&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">slot&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">HASH_ID&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">type_invalid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ATOM_LOAD&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">type_invalid&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">SOCKET_TYPE_INVALID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">未使用的&lt;/span>&lt;span class="n">socket类型就是&lt;/span> &lt;span class="n">SOCKET_TYPE_INVALID&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">分配出去的就在这边修改成保留的类型&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ATOM_CAS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">type_invalid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SOCKET_TYPE_RESERVE&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">初始化使用的&lt;/span>&lt;span class="n">socket的数据&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">protocol&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PROTOCOL_UNKNOWN&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">socket_server_udp_connect&lt;/span> &lt;span class="n">may&lt;/span> &lt;span class="n">inc&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">udpconncting&lt;/span> &lt;span class="n">directly&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">from&lt;/span> &lt;span class="n">other&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">before&lt;/span> &lt;span class="n">new_fd&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">so&lt;/span> &lt;span class="n">reset&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="n">here&lt;/span> &lt;span class="n">rather&lt;/span> &lt;span class="n">than&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">new_fd&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ATOM_INIT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">udpconnecting&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">retry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">--&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当在lua中调用了listen后，做的事实际上是调用线程自行申请fd，然后去申请 socket_server 包装的socket对象，打包好之后通过send_request发送给socket_server。
不过我有点疑惑的是，为什么在申请 socket_server 包装的socket对象的时候不用uint？这样就不用处理溢出情况了&lt;/p>
&lt;h3 id="send_request">send_request
&lt;/h3>&lt;p>先看看 request_package 是如何包装消息的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">struct&lt;/span> &lt;span class="nx">request_package&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">uint8_t&lt;/span> &lt;span class="nx">header&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// 6 bytes dummy
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">union&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">char&lt;/span> &lt;span class="nx">buffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">256&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">struct&lt;/span> &lt;span class="nx">request_open&lt;/span> &lt;span class="nx">open&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">struct&lt;/span> &lt;span class="nx">request_send&lt;/span> &lt;span class="nx">send&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">struct&lt;/span> &lt;span class="nx">request_send_udp&lt;/span> &lt;span class="nx">send_udp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">struct&lt;/span> &lt;span class="nx">request_close&lt;/span> &lt;span class="nx">close&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">struct&lt;/span> &lt;span class="nx">request_listen&lt;/span> &lt;span class="nx">listen&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">struct&lt;/span> &lt;span class="nx">request_bind&lt;/span> &lt;span class="nx">bind&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">struct&lt;/span> &lt;span class="nx">request_resumepause&lt;/span> &lt;span class="nx">resumepause&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">struct&lt;/span> &lt;span class="nx">request_setopt&lt;/span> &lt;span class="nx">setopt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">struct&lt;/span> &lt;span class="nx">request_udp&lt;/span> &lt;span class="nx">udp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">struct&lt;/span> &lt;span class="nx">request_setudp&lt;/span> &lt;span class="nx">set_udp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="nx">u&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 每种消息类型都是一个结构体，用union 包起来
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">uint8_t&lt;/span> &lt;span class="nx">dummy&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">256&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">struct&lt;/span> &lt;span class="nx">request_listen&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nx">fd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">uintptr_t&lt;/span> &lt;span class="nx">opaque&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">char&lt;/span> &lt;span class="nx">host&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>request_package的union包含了所有请求类型的消息体，其中的buffer[256]表明消息类型最大是256个字节。
这边我疑惑的是request_package 中前6个字节和后256字节都标记成了dummy, 暂时不确定这些占位字节的意义，可能是用来留做扩展？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="n">void&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">send_request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">struct&lt;/span> &lt;span class="n">socket_server&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ss&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">struct&lt;/span> &lt;span class="n">request_package&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">request&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">header&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uint8_t&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">request&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">header&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uint8_t&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">req&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">request&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offsetof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">struct&lt;/span> &lt;span class="n">request_package&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">header&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(;;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ssize_t&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ss&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">sendctrl_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">errno&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">EINTR&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;socket-server : send ctrl command error &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strerror&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">errno&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以 request_listen 为例子，在socket_server_listen中是直接对局部变量的request中u进行赋值即可，在真正调用发送函数send_request的时候，传入的就是统一的结构体。把每个协议具体细节屏蔽了。不过在发送的时候，需要传入request具体的长度。这个就需要在每个协议发送前自己算出来了&lt;/p>
&lt;p>在这边可以看到send_request的前6个字节是直接跳过的，然后len的类型也是被强制转成uint8了，所以一个request_message的最大程度也只能是256。&lt;/p>
&lt;p>同时还需要注意到这边写入的处理实际上是必须要保证完全写入的，对于非阻塞的管道，write操作必须阻塞到所有数据都完全写入到管道中。&lt;/p>
&lt;blockquote>
&lt;p>If a process attempts to read from an empty pipe, then read(2) will block until data is available. If a process attempts to write to a full pipe (see below), then write(2) blocks until sufficient data has been read from the pipe to allow the write to complete.&lt;/p>
&lt;/blockquote>
&lt;p>在调用write的时候，如果进程收到信号的话，那么就有可能会触发EINTR 打断正在执行的系统调用。而且这边时在完全没有写入数据之前才会出现EINTR错误。&lt;/p>
&lt;blockquote>
&lt;p>If a blocked call to one of the following interfaces is interrupted by a signal handler, then the call is automatically restarted after the signal handler returns if the SA_RESTART flag was used; otherwise the call fails with the error EINTR:
read(2), readv(2), write(2), writev(2), and ioctl(2) calls on &amp;ldquo;slow&amp;rdquo; devices. A &amp;ldquo;slow&amp;rdquo; device is one where the I/O call may block for an indefinite time, for example, a terminal, pipe, or socket. If an I/O call on a slow device has already transferred some data by the time it is interrupted by a signal handler, then the call will return a success status(normally, the number of bytes transferred). Note that a (local) disk is not a slow device according to this definition; I/O operations on disk devices are not interrupted by signals.&lt;/p>
&lt;/blockquote>
&lt;h3 id="socket-处理管道消息">socket 处理管道消息
&lt;/h3>&lt;p>worker线程把数据发送到管道以后，接下来的事情就得看socket线程的了。在最开始的时候说过 socket线程一直执行的是socket_server_poll函数，那就先看看socket_server_poll 函数大致执行的内容是怎么样的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">int
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">socket_server_poll(struct socket_server *ss, struct socket_message * result, int * more) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (;;) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (ss-&amp;gt;checkctrl) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ... // 检查是否有管道消息，并进行处理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (ss-&amp;gt;event_index == ss-&amp;gt;event_n) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ... // epoll 的消息处理完毕了，那就重新进入epoll_wait
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ... // 处理 ss-&amp;gt;event_index++ 对应的epoll消息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>socket_server_poll 主要分成三个部分：&lt;/p>
&lt;ol>
&lt;li>检查是否有管道传入的消息&lt;/li>
&lt;li>如果没有更多的消息需要执行，则执行epoll_wait&lt;/li>
&lt;li>如果有还没有处理完毕的消息，则继续处理&lt;/li>
&lt;/ol>
&lt;p>在初始化的时候，管道的读端就被塞入到了epoll中。当管道可读的时候，就会通过从epoll_wait中读取出来。&lt;/p>
&lt;p>把 关于管道的部分展开&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> for (;;) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (ss-&amp;gt;checkctrl) { // 判断是否存在检查管道标记
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (has_cmd(ss)) { //检查管道是否可读,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int type = ctrl_cmd(ss, result); // 处理管道消息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (type != -1) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> clear_closed_event(ss, result, type);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return type;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> continue;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ss-&amp;gt;checkctrl = 0; //
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (ss-&amp;gt;event_index == ss-&amp;gt;event_n) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ss-&amp;gt;event_n = sp_wait(ss-&amp;gt;event_fd, ss-&amp;gt;ev, MAX_EVENT); // 阻塞epoll_wait等待可操作的事件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ss-&amp;gt;checkctrl = 1; //是否检查管道的标记
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (more) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *more = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ss-&amp;gt;event_index = 0; //处理epoll事件的下标重置成0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (ss-&amp;gt;event_n &amp;lt;= 0) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ... // 错误处理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> continue;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct event *e = &amp;amp;ss-&amp;gt;ev[ss-&amp;gt;event_index++];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct socket *s = e-&amp;gt;s;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (s == NULL) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // dispatch pipe message at beginning
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> continue;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ... // 处理 ss-&amp;gt;event_index++ 对应的epoll消息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由这部分可以知道：&lt;/p>
&lt;ol>
&lt;li>每次socket线程在从epoll_wait中返回之后，都会标记检查命令管道。&lt;/li>
&lt;li>在处理返回的事件时，如果事件的socket是空的，则说明是管道的消息可读。&lt;/li>
&lt;li>for循环开始的时候判断 checkctrl ，这个变量只会在 初始化和epoll返回的时候被设置, 所以一次处理事件处理的时候，会优先把这次事件的所有管道消息给处理掉&lt;/li>
&lt;/ol>
&lt;p>而 ctrl_cmd 才是处理命令的核心, 具体看一下代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">static int
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ctrl_cmd(struct socket_server *ss, struct socket_message *result) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int fd = ss-&amp;gt;recvctrl_fd;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // the length of message is one byte, so 256 buffer size is enough.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint8_t buffer[256];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint8_t header[2];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> block_readpipe(fd, header, sizeof(header));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int type = header[0];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int len = header[1];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> block_readpipe(fd, buffer, len);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // ctrl command only exist in local fd, so don&amp;#39;t worry about endian.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> switch (type) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> case &amp;#39;L&amp;#39;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return listen_socket(ss,(struct request_listen *)buffer, result);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> default:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_error(NULL, &amp;#34;socket-server: Unknown ctrl %c.&amp;#34;,type);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return -1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> };
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return -1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">static int
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">listen_socket(struct socket_server *ss, struct request_listen * request, struct socket_message *result) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int id = request-&amp;gt;id;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int listen_fd = request-&amp;gt;fd;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct socket *s = new_fd(ss, id, listen_fd, PROTOCOL_TCP, request-&amp;gt;opaque, false);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (s == NULL) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> goto _failed;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ATOM_STORE(&amp;amp;s-&amp;gt;type , SOCKET_TYPE_PLISTEN);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> result-&amp;gt;opaque = request-&amp;gt;opaque;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> result-&amp;gt;id = id;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> result-&amp;gt;ud = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> result-&amp;gt;data = &amp;#34;listen&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ....
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return SOCKET_OPEN;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_failed:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ... // 错误处理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return SOCKET_ERR;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ctrl_cmd 中会从管道中读取出对应的header 和 body。之前分析过，管道的写入一定是完整的数据，不会存在一半的数据，所以管道读端也可以不用处理一半的包的情况。
这边先读取固定2字节的header，也就是type 和 len， 再根据len 去读取具体的数据到buffer中。&lt;/p>
&lt;p>数据包重装完毕之后，会根据类型转成把buffer强转成对应类型的数据丢入到具体的处理函数当中。&lt;/p>
&lt;p>还是以listen 为例子，这边收到的类型是 &amp;lsquo;L&amp;rsquo;, 具体的处理函数是listen_socket。listen_socket中主要就是把request中的fd 和 socket_server 中的一个fd关联起来。这边可以注意到一个事情，关联完毕之后，还对result进行了一些操作。&lt;/p>
&lt;p>顺着这result去看，我们可以找到在传入 socket_server_poll 的时候，reuslt就是一个指针。所以result会被还给带调用 socket_server_poll 的位置， 也就是 skynet_socket_poll。&lt;/p>
&lt;p>所以这边可以理解成socket处理完对应消息后，会对管道消息进行回包。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">int
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_socket_poll() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct socket_server *ss = SOCKET_SERVER;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(ss);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct socket_message result;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int more = 1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int type = socket_server_poll(ss, &amp;amp;result, &amp;amp;more);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> switch (type) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> case SOCKET_OPEN:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> forward_message(SKYNET_SOCKET_TYPE_CONNECT, true, &amp;amp;result);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> break;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> default:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_error(NULL, &amp;#34;Unknown socket message type %d.&amp;#34;,type);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return -1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (more) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return -1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return 1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>回到 skynet_socket_poll ，我们可以看到这边处理了 listen_socket 返回的 SOCKET_OPEN，然后把处理过的result传入到 forward_message&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// mainloop thread
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">static void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">forward_message(int type, bool padding, struct socket_message * result) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct skynet_socket_message *sm;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> size_t sz = sizeof(*sm);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (padding) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .... //填充字节
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sm = (struct skynet_socket_message *)skynet_malloc(sz);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sm-&amp;gt;type = type;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sm-&amp;gt;id = result-&amp;gt;id;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sm-&amp;gt;ud = result-&amp;gt;ud;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct skynet_message message;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> message.source = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> message.session = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> message.data = sm;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> message.sz = sz | ((size_t)PTYPE_SOCKET &amp;lt;&amp;lt; MESSAGE_TYPE_SHIFT);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (skynet_context_push((uint32_t)result-&amp;gt;opaque, &amp;amp;message)) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 处理失败错误
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>forward_message 内容不多，就是把reuslt的结果包装成 skynet_message，然后通过skynet_context_push传入到对应的skynet_context进行处理，还记得一开始opaque吗？它在最开始调用 socket_server_listen 的时候，就被赋值成了调用函数的服务的handle了。 同时在new_fd的时候，这个opaque也会被写入到包装的socket中，后面有socket 收到的消息时，就可以找到对应handle进行分发了。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>skynet_socket_poll是由socket线程不断调用处理的，skynet_socket_poll 上由是通过socket_server_poll处理网络数据的，处理完毕之后通过对应的type 和 result 来将结果进行分发到对应skynet_context来进行处理。&lt;/p>
&lt;p>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%85%AB-skynet%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%B1%BB%E5%9E%8B%E4%B8%89/socket_service.jpg"
width="984"
height="424"
srcset="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%85%AB-skynet%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%B1%BB%E5%9E%8B%E4%B8%89/socket_service_hu12696816049166196444.jpg 480w, https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%85%AB-skynet%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%B1%BB%E5%9E%8B%E4%B8%89/socket_service_hu8669951762421054402.jpg 1024w"
loading="lazy"
alt="socket_service"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="556px"
>&lt;/p>
&lt;p>这边只简单以 listen 行为把skynet底层的网络模型进行了分析，实际上收发包的内容也是相当重要的，后面有空可以了可以再写一篇详细分析一下其中的内容&lt;/p></description></item><item><title>Skynet源码阅读笔记(七)-skynet的线程类型（二）</title><link>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%83-skynet%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%B1%BB%E5%9E%8B%E4%BA%8C/</link><pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate><guid>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%83-skynet%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%B1%BB%E5%9E%8B%E4%BA%8C/</guid><description>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%83-skynet%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%B1%BB%E5%9E%8B%E4%BA%8C/skynet.png" alt="Featured image of post Skynet源码阅读笔记(七)-skynet的线程类型（二）" />&lt;h1 id="skynet源码阅读笔记七-skynet的线程类型">Skynet源码阅读笔记(七)-skynet的线程类型
&lt;/h1>&lt;p>skynet中的线程类型可以分为一下几种类型&lt;/p>
&lt;ul>
&lt;li>主线程&lt;/li>
&lt;li>worker 线程&lt;/li>
&lt;li>timer 线程&lt;/li>
&lt;li>monitor 线程&lt;/li>
&lt;li>socket 线程&lt;/li>
&lt;/ul>
&lt;p>这些线程的初始化都在start函数里，由主线程驱动&lt;/p>
&lt;h2 id="tiemr线程">tiemr线程
&lt;/h2>&lt;p>从start函数中进入，可以看到初始化timer线程的时候的使用了thread_timer。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#define CHECK_ABORT if (skynet_context_total()==0) break;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">thread_timer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">monitor&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_initthread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">THREAD_TIMER&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(;;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_updatetime&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">更新定时器相关&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_socket_updatetime&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">更新&lt;/span>&lt;span class="n">Socket&lt;/span> &lt;span class="err">的时间，&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CHECK_ABORT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">wakeup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">唤醒睡眠线程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">usleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2500&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">SIG&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">signal_hup&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">如果接收到&lt;/span> &lt;span class="n">SIGHUP&lt;/span> &lt;span class="err">新号，则输出日志&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SIG&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">wakeup&lt;/span> &lt;span class="n">socket&lt;/span> &lt;span class="n">thread&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_socket_exit&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">唤醒&lt;/span>&lt;span class="n">socket&lt;/span> &lt;span class="err">线程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">wakeup&lt;/span> &lt;span class="n">all&lt;/span> &lt;span class="n">worker&lt;/span> &lt;span class="n">thread&lt;/span> &lt;span class="o">//&lt;/span>&lt;span class="err">唤醒所有&lt;/span>&lt;span class="n">worker线程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_mutex_lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">quit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span>&lt;span class="n">work循环条件就是&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">quit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_cond_broadcast&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">cond&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pthread_mutex_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>socket部分先跳过，主要是因为还没探索过，不确定里面再做啥。&lt;/p>
&lt;p>从thread_timer 中可以看出，timer线程主要工作就是每2500微秒（2.5ms）定时调用 skynet_updatetime。当CHECK_ABORT检测执行到服务都退出了以后，timer才会跳出循环。
跳出循环后，还会唤醒socker和worker线程，让他们也执行退出流程。&lt;/p>
&lt;h2 id="timer-相关数据结构">timer 相关数据结构
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">#define TIME_NEAR_SHIFT 8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#define TIME_NEAR (1 &amp;lt;&amp;lt; TIME_NEAR_SHIFT)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#define TIME_LEVEL_SHIFT 6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#define TIME_LEVEL (1 &amp;lt;&amp;lt; TIME_LEVEL_SHIFT)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#define TIME_NEAR_MASK (TIME_NEAR-1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#define TIME_LEVEL_MASK (TIME_LEVEL-1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">struct timer_event {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t handle;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int session;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">struct timer_node {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct timer_node *next;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t expire;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">struct link_list {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct timer_node head;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct timer_node *tail;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">struct timer {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct link_list near[TIME_NEAR]; // 这边是 2 ^ 8 个，是最小的时间轮
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct link_list t[4][TIME_LEVEL]; // 0 位置的每个都是 2^8的轮， 数组1上每个都是2^16, 依次类推
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct spinlock lock;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t time;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t starttime; //开服时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint64_t current; //当前时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint64_t current_point;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">static struct timer * TI = NULL;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">static inline struct timer_node *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">link_clear(struct link_list *list) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct timer_node * ret = list-&amp;gt;head.next;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> list-&amp;gt;head.next = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> list-&amp;gt;tail = &amp;amp;(list-&amp;gt;head);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>skynet的定时器算法是时间轮，near是最近256个时间轮单位，每跑完256个单位才会更新一次时间轮。而t 可以认为是粒度更大的时间轮。
t0 上的每个元素的粒度都是2 ^ 8，一共TIME_LEVEL(2 ^ 6)个元素。
t1 上的每个元素的粒度都是2 ^ 14, 一共TIME_LEVEL(2 ^ 6)个元素。
t2 上的每个元素的粒度都是2 ^ 20, 一共TIME_LEVEL(2 ^ 6)个元素。
t3 上的每个元素的粒度都是2 ^ 26, 一共TIME_LEVEL(2 ^ 6)个元素。
所以t上刚好可表示2^32个元素。&lt;/p>
&lt;h2 id="初始化阶段">初始化阶段
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_timer_init(void) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TI = timer_create_timer();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t current = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> systime(&amp;amp;TI-&amp;gt;starttime, &amp;amp;current);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TI-&amp;gt;current = current;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TI-&amp;gt;current_point = gettime();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// centisecond: 1/100 second
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">static void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systime(uint32_t *sec, uint32_t *cs) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct timespec ti;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> clock_gettime(CLOCK_REALTIME, &amp;amp;ti);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *sec = (uint32_t)ti.tv_sec;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *cs = (uint32_t)(ti.tv_nsec / 10000000);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">static uint64_t
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gettime() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint64_t t;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct timespec ti;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> clock_gettime(CLOCK_MONOTONIC, &amp;amp;ti);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> t = (uint64_t)ti.tv_sec * 100;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> t += ti.tv_nsec / 10000000;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return t;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在初始化阶段，会将全局的TI需要的空间申请好，并将 current 和 current_point 设置好，这边需要注意的是，systime 和 gettime 的单位都是 1/100 秒，即10ms。&lt;/p>
&lt;h2 id="添加定时器">添加定时器
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">int
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_timeout(uint32_t handle, int time, int session) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (time &amp;lt;= 0) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 直接触发
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct skynet_message message;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> message.source = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> message.session = session;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> message.data = NULL;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> message.sz = (size_t)PTYPE_RESPONSE &amp;lt;&amp;lt; MESSAGE_TYPE_SHIFT;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (skynet_context_push(handle, &amp;amp;message)) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return -1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 定时触发
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct timer_event event;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> event.handle = handle;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> event.session = session;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timer_add(TI, &amp;amp;event, sizeof(event), time);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return session;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">static void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">timer_add(struct timer *T,void *arg,size_t sz,int time) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct timer_node *node = (struct timer_node *)skynet_malloc(sizeof(*node)+sz); // 多申请了sz的内存
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memcpy(node+1,arg,sz);//拷贝事件数据
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SPIN_LOCK(T);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> node-&amp;gt;expire=time+T-&amp;gt;time; // 设置过期事件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> add_node(T,node); // 放到对应位置上
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SPIN_UNLOCK(T);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">static void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">add_node(struct timer *T,struct timer_node *node) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t time=node-&amp;gt;expire;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t current_time=T-&amp;gt;time;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if ((time|TIME_NEAR_MASK)==(current_time|TIME_NEAR_MASK)) { // 如果是near粒度下
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> link(&amp;amp;T-&amp;gt;near[time&amp;amp;TIME_NEAR_MASK],node);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int i;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t mask=TIME_NEAR &amp;lt;&amp;lt; TIME_LEVEL_SHIFT;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (i=0;i&amp;lt;3;i++) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if ((time|(mask-1))==(current_time|(mask-1))) { // 找到与timer相对应的粒度
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> break;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mask &amp;lt;&amp;lt;= TIME_LEVEL_SHIFT;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> link(&amp;amp;T-&amp;gt;t[i][((time&amp;gt;&amp;gt;(TIME_NEAR_SHIFT + i*TIME_LEVEL_SHIFT)) &amp;amp; TIME_LEVEL_MASK)],node);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对外的主要接口是skynet_timeout，如果传入的时间小于0的话，则直接触发，产生对应的message丢入消息队列中。
而添加定时器通过timer_add来完成，这边在申请的内存的时候可以看到，定时器和对应事件的内存是一起申请的，node + 1 开始的内存存放的都是事件相关的数据。
add_node 则会根据过期事件来选择放到对应粒度的位置上&lt;/p>
&lt;h2 id="更新阶段">更新阶段
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_updatetime(void) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint64_t cp = gettime();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(cp &amp;lt; TI-&amp;gt;current_point) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_error(NULL, &amp;#34;time diff error: change from %lld to %lld&amp;#34;, cp, TI-&amp;gt;current_point);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TI-&amp;gt;current_point = cp;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else if (cp != TI-&amp;gt;current_point) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t diff = (uint32_t)(cp - TI-&amp;gt;current_point);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TI-&amp;gt;current_point = cp;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TI-&amp;gt;current += diff;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int i;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (i=0;i&amp;lt;diff;i++) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timer_update(TI);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">static void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">timer_update(struct timer *T) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SPIN_LOCK(T);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // try to dispatch timeout 0 (rare condition)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timer_execute(T); // 先再执行一遍当前时间的timer_execute，让那些执行timeout(0)的也能理解触发
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // shift time first, and then dispatch timer message
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timer_shift(T); //偏移时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timer_execute(T); // 继续执行正常的timer_execute
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SPIN_UNLOCK(T);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在time线程中，每次睡眠后执行的update就是 skynet_updatetime， cp是当前的时间戳，不过单位是10ms。
如果cp出现小于之前记录的current_point，则是出现了系统时间偏移了，这边打个日志记录一下。
正常情况下，update 会计算跟上一次差了多少单位，然后每个单位都执行一下timer_update, timer_update 执行的主要函数就是下面的两个子函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">static inline void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">timer_execute(struct timer *T) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int idx = T-&amp;gt;time &amp;amp; TIME_NEAR_MASK;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> while (T-&amp;gt;near[idx].head.next) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct timer_node *current = link_clear(&amp;amp;T-&amp;gt;near[idx]);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SPIN_UNLOCK(T);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // dispatch_list don&amp;#39;t need lock T
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dispatch_list(current); // 这个函数中会包装message，然后放到 消息队列中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SPIN_LOCK(T);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">static void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">timer_shift(struct timer *T) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int mask = TIME_NEAR;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t ct = ++T-&amp;gt;time;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (ct == 0) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> move_list(T, 3, 0); // 最大的一轮跑完了，那就从最大粒度的0号元素重新开始
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t time = ct &amp;gt;&amp;gt; TIME_NEAR_SHIFT;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int i=0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 找到下一个轮，如果为0则说明跑完当前的轮了，该去下一个更大的粒度的轮
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> while ((ct &amp;amp; (mask-1))==0) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int idx=time &amp;amp; TIME_LEVEL_MASK;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (idx!=0) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> move_list(T, i, idx);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> break;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mask &amp;lt;&amp;lt;= TIME_LEVEL_SHIFT;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> time &amp;gt;&amp;gt;= TIME_LEVEL_SHIFT;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ++i;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">static void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">move_list(struct timer *T, int level, int idx) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct timer_node *current = link_clear(&amp;amp;T-&amp;gt;t[level][idx]); //把对应粒度上面的事件分发到小粒度的轮上面
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> while (current) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct timer_node *temp=current-&amp;gt;next;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> add_node(T,current);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> current=temp;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>timer_execute 的作用就是将near中对应的链表取出，然后将对应的事件抛到消息队列中去。
timer_shift 的作用就是更新当前的时间轮，如果当前粒度的时间轮跑完了，则会到更大到粒度的时间轮中把对应的事件更新到小粒度的轮上&lt;/p>
&lt;h2 id="小结">小结
&lt;/h2>&lt;p>skynet的时间轮 就是将时间拆分成粒度的数组，加元素的时候，就直接到对应的粒度的位置上添加事件；更新的时候则把大粒度的事件轮拆分到小粒度上面等待执行。&lt;/p>
&lt;p>不过这边我没看到取消定时器的函数，不知道是不是看漏了 还是说 实现上是再在触发后由业务判断是不是要回调。&lt;/p>
&lt;p>后续在研究一下。&lt;/p>
&lt;p>socket线程相关的有点复杂，后续新开一篇总结吧。&lt;/p></description></item><item><title>Skynet源码阅读笔记(六)-skynet的线程类型（一）</title><link>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%85%AD-skynet%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%B1%BB%E5%9E%8B%E4%B8%80/</link><pubDate>Sat, 10 Feb 2024 00:00:00 +0000</pubDate><guid>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%85%AD-skynet%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%B1%BB%E5%9E%8B%E4%B8%80/</guid><description>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%85%AD-skynet%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%B1%BB%E5%9E%8B%E4%B8%80/skynet.png" alt="Featured image of post Skynet源码阅读笔记(六)-skynet的线程类型（一）" />&lt;h1 id="skynet源码阅读笔记六-skynet的线程类型">Skynet源码阅读笔记(六)-skynet的线程类型
&lt;/h1>&lt;p>skynet中的线程类型可以分为一下几种类型&lt;/p>
&lt;ul>
&lt;li>主线程&lt;/li>
&lt;li>worker 线程&lt;/li>
&lt;li>timer 线程&lt;/li>
&lt;li>monitor 线程&lt;/li>
&lt;li>socket 线程&lt;/li>
&lt;/ul>
&lt;p>这些线程的初始化都在start函数里，由主线程驱动&lt;/p>
&lt;h2 id="主线程">主线程
&lt;/h2>&lt;p>主线程只负责初始化工作，它主要是在start中创建了一些基础服务、创建出其他线程。执行完初始化后，主线程就会阻塞在最后等待其他结束。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">static void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">start(int thread) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pthread_t pid[thread+3]; // thread 是work 线程的数目，3是其他3个类型的线程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct monitor *m = skynet_malloc(sizeof(*m));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memset(m, 0, sizeof(*m));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> m-&amp;gt;count = thread;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> m-&amp;gt;sleep = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> m-&amp;gt;m = skynet_malloc(thread * sizeof(struct skynet_monitor *));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int i;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (i=0;i&amp;lt;thread;i++) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> m-&amp;gt;m[i] = skynet_monitor_new();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (pthread_mutex_init(&amp;amp;m-&amp;gt;mutex, NULL)) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fprintf(stderr, &amp;#34;Init mutex error&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exit(1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (pthread_cond_init(&amp;amp;m-&amp;gt;cond, NULL)) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fprintf(stderr, &amp;#34;Init cond error&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exit(1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> create_thread(&amp;amp;pid[0], thread_monitor, m); // 第一个线程用于 thread_monitor
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> create_thread(&amp;amp;pid[1], thread_timer, m); // 第二个线程用于 thread_timer
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> create_thread(&amp;amp;pid[2], thread_socket, m); // 第三个线程用于 thread_socket
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> static int weight[] = {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -1, -1, -1, -1, 0, 0, 0, 0,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1, 1, 1, 1, 1, 1, 1, 1,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2, 2, 2, 2, 2, 2, 2, 2,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 3, 3, 3, 3, 3, 3, 3, 3, };
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct worker_parm wp[thread];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (i=0;i&amp;lt;thread;i++) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wp[i].m = m;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wp[i].id = i;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (i &amp;lt; sizeof(weight)/sizeof(weight[0])) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wp[i].weight= weight[i];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wp[i].weight = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> create_thread(&amp;amp;pid[i+3], thread_worker, &amp;amp;wp[i]); // 主线程创建其他work线程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (i=0;i&amp;lt;thread+3;i++) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pthread_join(pid[i], NULL); // 然后阻塞在这里等待其他线程结束
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> free_monitor(m);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="monitor-线程">monitor 线程
&lt;/h2>&lt;p>monitor线程执行的函数是thread_monitor&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">static void *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">thread_monitor(void *p) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct monitor * m = p;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int i;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int n = m-&amp;gt;count;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_initthread(THREAD_MONITOR);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (;;) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CHECK_ABORT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (i=0;i&amp;lt;n;i++) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 检测对应线程的monitor 状态
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_monitor_check(m-&amp;gt;m[i]);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (i=0;i&amp;lt;5;i++) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CHECK_ABORT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sleep(1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return NULL;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_monitor_check(struct skynet_monitor *sm) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (sm-&amp;gt;version == sm-&amp;gt;check_version) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (sm-&amp;gt;destination) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_context_endless(sm-&amp;gt;destination);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_error(NULL, &amp;#34;A message from [ :%08x ] to [ :%08x ] maybe in an endless loop (version = %d)&amp;#34;, sm-&amp;gt;source , sm-&amp;gt;destination, sm-&amp;gt;version);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sm-&amp;gt;check_version = sm-&amp;gt;version;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该函数每5秒跑一下检测，判断对应线程的check_version 是否和其version相等，如果相等就说明可能存在死循环，调用 skynet_context_endless 来对ctx的 endless进行赋值。&lt;/p>
&lt;p>monitor 这个结构如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">struct monitor {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int count;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct skynet_monitor ** m; // skynet_monitor数组，每个work线程一个
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pthread_cond_t cond; // 用于唤醒睡眠的worker线程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pthread_mutex_t mutex;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int sleep; // 睡眠的work线程数量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int quit;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">struct skynet_monitor {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ATOM_INT version; // 执行message的版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int check_version; // 上一次检测时 执行message的版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t source; // message 的source
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t destination; //message 的destination
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>本质上monitor是维护了一个条件变量 + skynet_monitor数组，每个work线程都拥有一个自己的skynet_monitor。因为worker线程和monitor线程在使用skynet_monitor时，写的是skynet_monitor的不同字段，而读操作即使出现异步问题也不要紧，所以这边可以不需要加锁。&lt;/p>
&lt;p>monitor中的sleep 表示由多少个work线程在睡眠，睡眠的worker线程会阻塞在对应条件变量上等待被唤醒。&lt;/p>
&lt;h2 id="worker线程">worker线程
&lt;/h2>&lt;p>worker 线程执行的是thread_worker 函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">struct worker_parm {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct monitor *m; // monitor的引用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int id; // 线程ID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int weight; //权重
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// work线程的执行的实际函数如下
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">static void *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">thread_worker(void *p) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct worker_parm *wp = p;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int id = wp-&amp;gt;id;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int weight = wp-&amp;gt;weight;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct monitor *m = wp-&amp;gt;m;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct skynet_monitor *sm = m-&amp;gt;m[id];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_initthread(THREAD_WORKER);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct message_queue * q = NULL;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> while (!m-&amp;gt;quit) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> q = skynet_context_message_dispatch(sm, q, weight); // 主要执行这个函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (q == NULL) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (pthread_mutex_lock(&amp;amp;m-&amp;gt;mutex) == 0) { // 如果返回的q为空，则获取锁后标记自己为sleep
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ++ m-&amp;gt;sleep;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // &amp;#34;spurious wakeup&amp;#34; is harmless,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // because skynet_context_message_dispatch() can be call at any time.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (!m-&amp;gt;quit)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pthread_cond_wait(&amp;amp;m-&amp;gt;cond, &amp;amp;m-&amp;gt;mutex); // 等待被唤醒，pthread_cond_wait 可能存在虚假唤醒，但并不要紧
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- m-&amp;gt;sleep;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (pthread_mutex_unlock(&amp;amp;m-&amp;gt;mutex)) { // 释放掉对应的锁
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fprintf(stderr, &amp;#34;unlock mutex error&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exit(1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return NULL;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>thread_worker这边主要就是执行 skynet_context_message_dispatch 函数，如果这个函数的返回值是空，则等待下一次的执行&lt;/p>
&lt;p>具体看一下 skynet_context_message_dispatch 的内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">struct&lt;/span> &lt;span class="n">message_queue&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">skynet_context_message_dispatch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_monitor&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">struct&lt;/span> &lt;span class="n">message_queue&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="n">weight&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_globalmq_pop&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">从全局的消息队列中获取一个消息队列&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="n">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">没有则返回&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_mq_handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span>&lt;span class="err">获取这个消息队列对应的服务实例&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_handle_grab&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">handle&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">drop_t&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">handle&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_mq_release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">drop_message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">skynet_globalmq_pop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_message&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">skynet_mq_pop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">开始获取消息队列中的消息，&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_context_release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">skynet_globalmq_pop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">weight&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">这边可以看出，每次执行消息是队列的&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">weight&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_mq_length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;=&lt;/span> &lt;span class="n">weight&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">overload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_mq_overload&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">当消息超载了之后，打个日志报警一下&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">overload&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;May overload, message queue length = &lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">overload&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_monitor_trigger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">source&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">handle&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">告诉&lt;/span>&lt;span class="n">monitor当前执行的服务是哪个服务&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">cb&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dispatch_message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">执行真正的信息处理&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_monitor_trigger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">message_queue&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">nq&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_globalmq_pop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">nq&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">If&lt;/span> &lt;span class="n">global&lt;/span> &lt;span class="n">mq&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">empty&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">push&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="n">back&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">next&lt;/span> &lt;span class="n">queue&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">nq&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">Else&lt;/span> &lt;span class="n">global&lt;/span> &lt;span class="n">mq&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">empty&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">block&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">don&lt;/span>&lt;span class="s1">&amp;#39;t push q back, and return q again (for next dispatch)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_globalmq_push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nq&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_context_release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>skynet_context_message_dispatch 就是从队列中消费消息，weight在这起到的作用就是每次执行队列总长度的1/(2^weight)&lt;/p>
&lt;p>所以前8条线程应该都是执行完所有消息，8-16条每次执行1/2的消息长度的数据，一次类推。&lt;/p>
&lt;p>还有一个值得注意的，skynet_monitor_trigger就是会在这往skynet_monitor写入当前的服务ID，以便monitor线程进行监控&lt;/p>
&lt;p>执行消息的函数是dispatch_message，dispatch_message的内容也不长，完整的看一下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">static void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dispatch_message(struct skynet_context *ctx, struct skynet_message *msg) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(ctx-&amp;gt;init);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CHECKCALLING_BEGIN(ctx)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pthread_setspecific(G_NODE.handle_key, (void *)(uintptr_t)(ctx-&amp;gt;handle));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 取出消息对应的类型和长度，然后打个日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int type = msg-&amp;gt;sz &amp;gt;&amp;gt; MESSAGE_TYPE_SHIFT;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> size_t sz = msg-&amp;gt;sz &amp;amp; MESSAGE_TYPE_MASK;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FILE *f = (FILE *)ATOM_LOAD(&amp;amp;ctx-&amp;gt;logfile);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (f) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_log_output(f, msg-&amp;gt;source, type, msg-&amp;gt;session, msg-&amp;gt;data, sz);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ++ctx-&amp;gt;message_count;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int reserve_msg;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 如果开启了profile，则会在这边统计对应的服务执行的时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (ctx-&amp;gt;profile) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ctx-&amp;gt;cpu_start = skynet_thread_time();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> reserve_msg = ctx-&amp;gt;cb(ctx, ctx-&amp;gt;cb_ud, type, msg-&amp;gt;session, msg-&amp;gt;source, msg-&amp;gt;data, sz);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint64_t cost_time = skynet_thread_time() - ctx-&amp;gt;cpu_start;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ctx-&amp;gt;cpu_cost += cost_time;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 不然就直接调用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> reserve_msg = ctx-&amp;gt;cb(ctx, ctx-&amp;gt;cb_ud, type, msg-&amp;gt;session, msg-&amp;gt;source, msg-&amp;gt;data, sz);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (!reserve_msg) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_free(msg-&amp;gt;data);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CHECKCALLING_END(ctx)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>dispatch_message 准确来说目的就是执行ctx-&amp;gt;cb，但外部根据执行环境决定是否写入日志和统计函数执行时间。&lt;/p>
&lt;h2 id="小结">小结
&lt;/h2>&lt;p>这边先看了一下主线程、monitor线程和worker线程是如何工作的，另外两个线程下一次再分析。&lt;/p>
&lt;p>主线程主要是初始化环境以及各个其他线程，然后join等待其他线程结束
monitor线程可以认为就是每5秒判断一次是否当前执行的某个worker线程进入了死循环。
worker线程就是将消息队列中的消息取出，并调用对应服务的cb函数。&lt;/p></description></item><item><title>Skynet源码阅读笔记(五)-skynet_context</title><link>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%BA%94-skynet_context/</link><pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate><guid>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%BA%94-skynet_context/</guid><description>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%BA%94-skynet_context/skynet.png" alt="Featured image of post Skynet源码阅读笔记(五)-skynet_context" />&lt;h1 id="skynet源码阅读笔记-skynet_context">Skynet源码阅读笔记-skynet_context
&lt;/h1>&lt;h2 id="skynet_context">skynet_context
&lt;/h2>&lt;p>在Skynet中，服务是由skynetContext来定义的，服务拥有自己的module，自己的messageQueue以及自己的其他数据结构。&lt;/p>
&lt;p>module、messageQueue、handle的概念在之前的文章中已经分析过了，现在就可以开始分析skynet_context了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">struct skynet_context {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void * instance; // mod 实例
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct skynet_module * mod; // module
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void * cb_ud; // 回调函数的data
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_cb cb; // 回调函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct message_queue *queue; // 消息队列
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ATOM_POINTER logfile; // 日志文件的指针（原子指针）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint64_t cpu_cost; // in microsec CPU运行时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint64_t cpu_start; // in microsec
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> char result[32]; // 用来保存执行CMD命令的结果
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t handle; // skynet_context 在全局映射的handle
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int session_id; //
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ATOM_INT ref; // 引用计数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int message_count; // 受到过的消息总数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bool init; // 是否初始化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bool endless; // 是否死循环
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bool profile; // 是否开启了profile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CHECKCALLING_DECL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在分析消息队列的时候，有说到全局的消息队列会不断dispatch消息到 skynet_context 的私有消息队列里。而work线程会从 skynet_context 的私有队列里不断消费数据。这边可以更详细的分析一下。&lt;/p>
&lt;h2 id="初始化skynetcontext">初始化skynetContext
&lt;/h2>&lt;p>初始化 skynet_context_new 是通过 skynet_context_new 来进行的，这个函数在分析module、message_queue的时候已经有分析过了，这边完整的看一下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">skynet_context_new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">加载&lt;/span>&lt;span class="n">module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_module&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">mod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_module_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">mod&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">创建&lt;/span>&lt;span class="n">module实例&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">inst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_module_instance_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mod&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">inst&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CHECKCALLING_INIT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">给&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="err">的所有变量赋初始值&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mod&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">将&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="err">的引用计数设置为&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ATOM_INIT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ref&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">cb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">cb_ud&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">session_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">初始化&lt;/span>&lt;span class="n">logfile&lt;/span> &lt;span class="err">原子指针&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ATOM_INIT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">logfile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uintptr_t&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">init&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">endless&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">cpu_cost&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">cpu_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">message_count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">profile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">G_NODE&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">profile&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">初始化&lt;/span>&lt;span class="n">handle&lt;/span> &lt;span class="err">和&lt;/span> &lt;span class="n">message&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_handle_register&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">message_queue&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_mq_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">handle&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">context_inc&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">执行&lt;/span>&lt;span class="n">module的初始化&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CHECKCALLING_BEGIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_module_instance_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mod&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CHECKCALLING_END&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">初始化成功的处理&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">这边会减少初始化的引用计数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_context_release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ret&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">init&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">将当前&lt;/span>&lt;span class="n">queue&lt;/span> &lt;span class="err">塞入到&lt;/span>&lt;span class="n">global&lt;/span> &lt;span class="n">mq中&lt;/span>&lt;span class="err">，等待&lt;/span>&lt;span class="n">work线程处理&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_globalmq_push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ret&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ret&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;LAUNCH &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">param&lt;/span> &lt;span class="err">?&lt;/span> &lt;span class="n">param&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">ret&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">初始化失败就释放&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;FAILED launch &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">handle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_context_release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_handle_retire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">handle&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">drop_t&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">handle&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_mq_release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">drop_message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>初始化流程中主要就是加载并实例化module，并创建message_queue提供给work进行处理。&lt;/p>
&lt;p>在初始化的时候，可以看到引用计数被设置成2，这边初始化为2的原因我猜测是因为&lt;/p>
&lt;ol>
&lt;li>初始化流程算引用一次，所以初始化结束会减少一次 可以看到调用了skynet_context_release；&lt;/li>
&lt;li>另一次是因为注册到handle中， 可以看到skynet_handle_register并不会增加引用结束，但在执行 handle_exit的时候，会调用到 skynet_handle_retire，这里面会对ctx的引用技术减少一。&lt;/li>
&lt;/ol>
&lt;p>减少引用计数的调用如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">struct skynet_context *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_context_release(struct skynet_context *ctx) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (ATOM_FDEC(&amp;amp;ctx-&amp;gt;ref) == 1) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> delete_context(ctx);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return NULL;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ctx;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ATOM_FDEC 会将ref减少1， 并返回调用前的值。所以当引用计数为1进来的时候，就会删掉对应的 skynet_context&lt;/p>
&lt;h2 id="回调函数的注册与回调时机">回调函数的注册与回调时机
&lt;/h2>&lt;p>每个服务都会有自己的回调函数，这个回调函数的作用就是在收到message的时候，调用回来函数来进行处理。&lt;/p>
&lt;h3 id="注册时机">注册时机
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_callback(struct skynet_context * context, void *ud, skynet_cb cb) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> context-&amp;gt;cb = cb;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> context-&amp;gt;cb_ud = ud;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>每个服务通过 skynet_callback 来注册自己的回调，调用这个的时机都是在每个服务内部自己决定。
在skynet中的自带的几个服务，都是在init的时候调用 skynet_callback 来注册回调&lt;/p>
&lt;h3 id="回调时机">回调时机
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">struct message_queue *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_context_message_dispatch(struct skynet_monitor *sm, struct message_queue *q, int weight) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (i=0;i&amp;lt;n;i++) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 如果没有回调函数，则直接释放消息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (ctx-&amp;gt;cb == NULL) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_free(msg.data);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dispatch_message(ctx, &amp;amp;msg);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>skynet_context_message_dispatch 这个函数是在work线程执行中回调用的函数，该函数会在ctx存在要处理的消息时调用&lt;/p>
&lt;p>dispatch_message 具体函数如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">static void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dispatch_message(struct skynet_context *ctx, struct skynet_message *msg) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(ctx-&amp;gt;init);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CHECKCALLING_BEGIN(ctx)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 设置当前线程正在跑的handle
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pthread_setspecific(G_NODE.handle_key, (void *)(uintptr_t)(ctx-&amp;gt;handle));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int type = msg-&amp;gt;sz &amp;gt;&amp;gt; MESSAGE_TYPE_SHIFT;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> size_t sz = msg-&amp;gt;sz &amp;amp; MESSAGE_TYPE_MASK;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 打个收到消息的日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FILE *f = (FILE *)ATOM_LOAD(&amp;amp;ctx-&amp;gt;logfile);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (f) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_log_output(f, msg-&amp;gt;source, type, msg-&amp;gt;session, msg-&amp;gt;data, sz);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ++ctx-&amp;gt;message_count;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int reserve_msg;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (ctx-&amp;gt;profile) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 如果开启了profile，则会记录调用前后的CPU时间差
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ctx-&amp;gt;cpu_start = skynet_thread_time();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> reserve_msg = ctx-&amp;gt;cb(ctx, ctx-&amp;gt;cb_ud, type, msg-&amp;gt;session, msg-&amp;gt;source, msg-&amp;gt;data, sz);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint64_t cost_time = skynet_thread_time() - ctx-&amp;gt;cpu_start;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ctx-&amp;gt;cpu_cost += cost_time;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> reserve_msg = ctx-&amp;gt;cb(ctx, ctx-&amp;gt;cb_ud, type, msg-&amp;gt;session, msg-&amp;gt;source, msg-&amp;gt;data, sz);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (!reserve_msg) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_free(msg-&amp;gt;data);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CHECKCALLING_END(ctx)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>dispatch_message 函数实际上就是调用了ctx函数的回调函数，只是在调用前后额外设置了环境相关的变量。&lt;/p>
&lt;h2 id="小结">小结
&lt;/h2>&lt;p>skynet_context 的重要结构到这边就分析完了，skynet_context的作用主要就是给modules提供一个运行环境，拥有自己独立的数据结构，并提供接口给module让其能够用handle或者名字的形式给其他skynet_context 发送消息。&lt;/p></description></item><item><title>Skynet源码阅读笔记(四)-message_queue</title><link>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%9B%9B-message_queue/</link><pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate><guid>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%9B%9B-message_queue/</guid><description>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%9B%9B-message_queue/skynet.png" alt="Featured image of post Skynet源码阅读笔记(四)-message_queue" />&lt;h1 id="skynet源码阅读笔记-message">Skynet源码阅读笔记-message
&lt;/h1>&lt;h2 id="skynet_message">skynet_message
&lt;/h2>&lt;p>在skynet中，两个服务之间是通过message传递消息来触发事件的&lt;/p>
&lt;p>skynet_message 结构如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">struct skynet_message {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t source; // 消息源的handle
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int session; // 消息的session Id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void * data; // 消息的内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> size_t sz; // 消息的长度 和 类型，
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// type is encoding in skynet_message.sz high 8bit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#define MESSAGE_TYPE_MASK (SIZE_MAX &amp;gt;&amp;gt; 8)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#define MESSAGE_TYPE_SHIFT ((sizeof(size_t)-1) * 8)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="message_queue">message_queue
&lt;/h2>&lt;p>而保存 skynet_message 的结构则是 message_queue&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">struct&lt;/span> &lt;span class="n">message_queue&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">spinlock&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">自旋锁&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">handle&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">对应的&lt;/span>&lt;span class="n">handle&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">cap&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">当前消息队列容量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">消息队列头&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">tail&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">消息队列尾&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">release&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span>&lt;span class="err">是否被释放&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">in_global&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">标记是否在全局队列中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">overload&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">是否超载&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">overload_threshold&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span>&lt;span class="err">超载阈值&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_message&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">实际的消息对了&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">message_queue&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">下一个消息队列&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>message_queue 是一个简单的结构并不复杂的消息队列，本质上就是 由一个 循环数组 + 自旋锁构成。&lt;/p>
&lt;p>操作 message_queue 的代码都在 skyenet_mq.c 中。本质上和操作普通队列没什么特别大区别，只是每次操作前都通过自旋锁来锁住操作。当消息通过 skynet_mq_push 塞进队列的时候，如果队列满了的话就会变成原来的2倍。&lt;/p>
&lt;p>message_queue 中的handle 说明了这个 message_queue 绑定上的对应的 skynet_context。在skynet_context_new中可以看到对应的代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">skynet_context_new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_handle_register&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">这一步就是笔记三中的部分&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">message_queue&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_mq_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">handle&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">获取&lt;/span>&lt;span class="n">handle后&lt;/span>&lt;span class="err">，就创建&lt;/span> &lt;span class="n">message_queue&lt;/span>&lt;span class="err">，&lt;/span> &lt;span class="err">并绑定上对应的&lt;/span>&lt;span class="n">handle&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="global_queue">global_queue
&lt;/h2>&lt;p>mesaage_queue 在接收到消息后, 会将自己放入到global_queue 这个结构中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">struct global_queue {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct message_queue *head; // mesaage_queue 的链表头
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct message_queue *tail; // mesaage_queue 的链表尾
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct spinlock lock; // 自旋锁
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">static struct global_queue *Q = NULL;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="数据的消费以及产生">数据的消费以及产生
&lt;/h2>&lt;p>这个结构是一个全局变量，它管理着目前有消息的消息队列。在 skynet_context_message_dispatch 函数中，message_queue的message 会被消费&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">struct message_queue *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_context_message_dispatch(struct skynet_monitor *sm, struct message_queue *q, int weight) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (q == NULL) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> q = skynet_globalmq_pop(); // 获取全局消息队列的头部
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (q==NULL)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return NULL;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t handle = skynet_mq_handle(q);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct skynet_context * ctx = skynet_handle_grab(handle); // 找到对应的 skynet_context
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .....
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int i,n=1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct skynet_message msg;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (i=0;i&amp;lt;n;i++) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //从队列头部获取消息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (skynet_mq_pop(q,&amp;amp;msg)) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .....
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (ctx-&amp;gt;cb == NULL) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_free(msg.data);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 触发消息事件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dispatch_message(ctx, &amp;amp;msg);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到skynet_context_message_dispatch 函数就是从全局队列拿到队列的消息列表后，在从消息列表中获取到对应消息来消费。&lt;/p>
&lt;p>这个函数skynet_context_message_dispatch 实际上是被包装在thread_worker，在初始化的时候由多个线程一起调用，所以需要加锁。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">static void *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">thread_worker(void *p) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ....
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> while (!m-&amp;gt;quit) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> q = skynet_context_message_dispatch(sm, q, weight); --- 所有线程一起执行skynet_context_message_dispatch
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ....
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所以，所有工作线程到最后只是执行对应的服务的事件队列而已。&lt;/p>
&lt;p>而对于一个消息，它会通过下面两个接口塞入到消息队列中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">int
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_context_push(uint32_t handle, struct skynet_message *message) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct skynet_context * ctx = skynet_handle_grab(handle);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (ctx == NULL) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return -1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_mq_push(ctx-&amp;gt;queue, message);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_context_release(ctx);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_context_send(struct skynet_context * ctx, void * msg, size_t sz, uint32_t source, int type, int session) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct skynet_message smsg;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> smsg.source = source;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> smsg.session = session;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> smsg.data = msg;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> smsg.sz = sz | (size_t)type &amp;lt;&amp;lt; MESSAGE_TYPE_SHIFT;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_mq_push(ctx-&amp;gt;queue, &amp;amp;smsg);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>skynet.send 最后也是调用的 skynet_context_push， messsage会在外面包装好，然后直接丢到对应的 skynet_context 的 message_queue中。&lt;/p>
&lt;p>skynet_harbor_send 则是调用的 skynet_context_send 来把消息塞入到对应的message中。&lt;/p></description></item><item><title>Skynet源码阅读笔记(三)-SkynetetHandle</title><link>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%89-skynetethandle/</link><pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate><guid>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%89-skynetethandle/</guid><description>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%89-skynetethandle/skynet.png" alt="Featured image of post Skynet源码阅读笔记(三)-SkynetetHandle" />&lt;h1 id="skynet源码阅读笔记-skynetethandle">Skynet源码阅读笔记-SkynetetHandle
&lt;/h1>&lt;p>在一个skyent进程中，handle的作用是用来通过它查找对应注册的ctx。&lt;/p>
&lt;p>e而在 skynet_context_new 创建一个新的ctx的时候， 会通过 skynet_handle_register 来获取 ctx 对应的 handle。下面看看具体是怎么玩的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">skynet_context_new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">handle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_handle_register&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="handle_storage">handle_storage
&lt;/h2>&lt;p>先看一下 handle_storage 这个结构&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">struct handle_name {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> char * name;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t handle;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">struct handle_storage {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct rwlock lock; // 读写锁
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t harbor; // 本skynet节点的harbor
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t handle_index; // 下一个handle 插入时查找的位置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int slot_size; // slot 的长度
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct skynet_context ** slot; // skynet_context 数组
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int name_cap; // 当前数组的长度
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int name_count; // 当前使用个数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct handle_name *name; // 名字映射handle的数组
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">static struct handle_storage *H = NULL;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>handle_storage结构很简单，就是一个 skynet_context 的数组，只是因为它是一个全局的对象，所以需要一个读写锁来控制访问。&lt;/p>
&lt;h2 id="skynet_handle_register">skynet_handle_register
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">uint32_t
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_handle_register(struct skynet_context *ctx) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct handle_storage *s = H;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rwlock_wlock(&amp;amp;s-&amp;gt;lock);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (;;) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int i;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t handle = s-&amp;gt;handle_index;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 从handle_index 位置开始找一个可以插入的位置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (i=0;i&amp;lt;s-&amp;gt;slot_size;i++,handle++) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (handle &amp;gt; HANDLE_MASK) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 0 is reserved
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> handle = 1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int hash = handle &amp;amp; (s-&amp;gt;slot_size-1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (s-&amp;gt;slot[hash] == NULL) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 找到空位就插入返回
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s-&amp;gt;slot[hash] = ctx;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s-&amp;gt;handle_index = handle + 1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rwlock_wunlock(&amp;amp;s-&amp;gt;lock);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> handle |= s-&amp;gt;harbor;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return handle;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert((s-&amp;gt;slot_size*2 - 1) &amp;lt;= HANDLE_MASK);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 需要扩容了
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct skynet_context ** new_slot = skynet_malloc(s-&amp;gt;slot_size * 2 * sizeof(struct skynet_context *));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memset(new_slot, 0, s-&amp;gt;slot_size * 2 * sizeof(struct skynet_context *));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (i=0;i&amp;lt;s-&amp;gt;slot_size;i++) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (s-&amp;gt;slot[i]) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int hash = skynet_context_handle(s-&amp;gt;slot[i]) &amp;amp; (s-&amp;gt;slot_size * 2 - 1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(new_slot[hash] == NULL);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> new_slot[hash] = s-&amp;gt;slot[i];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_free(s-&amp;gt;slot);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s-&amp;gt;slot = new_slot;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s-&amp;gt;slot_size *= 2;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 扩容完成后再插入一遍
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>skynet_handle_register 需要做的事情就是将 ctx 插入到一个当前空着的 slot 中。&lt;/p>
&lt;p>因为是修改数组，所以进入函数的时候就获取写锁，这边从 handle_index 开始遍历数组，转一圈如果没找到空位就将数组扩充成原来的2倍，然后再执行一个插入。找到空位后将数组下标返回，这个数组下标就是 skynet_context 的handle。&lt;/p>
&lt;p>稍微值得注意的是，因为返回的是下标，所以扩容的时候原来位置对应的元素还是应该一样的。&lt;/p>
&lt;h2 id="skynet_handle_namehandle">skynet_handle_namehandle
&lt;/h2>&lt;p>这个接口是用名字和handle进行把绑定&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">_insert_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">struct&lt;/span> &lt;span class="n">handle_storage&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uint32_t&lt;/span> &lt;span class="n">handle&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">begin&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">name_count&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">二分查找对应插入点&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">handle_name&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">mid&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">begin&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_strdup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_insert_name_before&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">handle&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">begin&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">真正插入的行为执行点&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">skynet_handle_namehandle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uint32_t&lt;/span> &lt;span class="n">handle&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rwlock_wlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">H&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_insert_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">H&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">handle&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rwlock_wunlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">H&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">ret&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 _insert_name 中可以很明显的看出来， handle_storage 的 name 数组是一个有序的数组，插入的时候通过二分来找到插入的位置，然后调用 _insert_name_before 完成插入， _insert_name_before 中包含了对该数组的扩容以及元素移动等行为。&lt;/p>
&lt;h2 id="skynet_handle_retire">skynet_handle_retire
&lt;/h2>&lt;p>看一下删除操作&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">int
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_handle_retire(uint32_t handle) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int ret = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct handle_storage *s = H;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rwlock_wlock(&amp;amp;s-&amp;gt;lock);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint32_t hash = handle &amp;amp; (s-&amp;gt;slot_size-1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct skynet_context * ctx = s-&amp;gt;slot[hash];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (ctx != NULL &amp;amp;&amp;amp; skynet_context_handle(ctx) == handle) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s-&amp;gt;slot[hash] = NULL;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret = 1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int i;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int j=0, n=s-&amp;gt;name_count;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 开始删除name中的对应关系
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (i=0; i&amp;lt;n; ++i) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (s-&amp;gt;name[i].handle == handle) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_free(s-&amp;gt;name[i].name);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> continue;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else if (i!=j) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s-&amp;gt;name[j] = s-&amp;gt;name[i];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ++j;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s-&amp;gt;name_count = j;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ctx = NULL;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rwlock_wunlock(&amp;amp;s-&amp;gt;lock);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (ctx) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // release ctx may call skynet_handle_* , so wunlock first.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_context_release(ctx);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ret;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因为handle 本身就是数组下标，所以对于删除 slot 来说很简单，相对麻烦的事情是删name里面的对应，需要遍历和移动整个数组。&lt;/p>
&lt;h2 id="skynet_handle_init">skynet_handle_init
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_handle_init(int harbor) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(H==NULL);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct handle_storage * s = skynet_malloc(sizeof(*H));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s-&amp;gt;slot_size = DEFAULT_SLOT_SIZE;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s-&amp;gt;slot = skynet_malloc(s-&amp;gt;slot_size * sizeof(struct skynet_context *));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memset(s-&amp;gt;slot, 0, s-&amp;gt;slot_size * sizeof(struct skynet_context *));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rwlock_init(&amp;amp;s-&amp;gt;lock);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // reserve 0 for system
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s-&amp;gt;harbor = (uint32_t) (harbor &amp;amp; 0xff) &amp;lt;&amp;lt; HANDLE_REMOTE_SHIFT;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s-&amp;gt;handle_index = 1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s-&amp;gt;name_cap = 2;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s-&amp;gt;name_count = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s-&amp;gt;name = skynet_malloc(s-&amp;gt;name_cap * sizeof(struct handle_name));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> H = s;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Don&amp;#39;t need to free H
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>整个结构初始化的行为 在 skynet_start 的时候调用 skynet_handle_init，这边简单的为几个数组长度进行了初始化。稍微有点点疑惑的是 特别注释了一个 不用free H。 那H的内存什么时候释放呢？&lt;/p></description></item><item><title>Skynet源码阅读笔记(二)-SkynetModule</title><link>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%BA%8C-skynetmodule/</link><pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate><guid>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%BA%8C-skynetmodule/</guid><description>&lt;img src="https://frozenlychees.github.io/skynet.jpg" alt="Featured image of post Skynet源码阅读笔记(二)-SkynetModule" />&lt;h1 id="skynet源码阅读笔记-skynetmodule">Skynet源码阅读笔记-SkynetModule
&lt;/h1>&lt;p>skynet的服务可以认为是 SkynetModule 的实例，skynet本身自带了4个类型的服务，gate、logger、snlua、 harbor。 自带的这几个服务位于 service-src下。&lt;/p>
&lt;p>承接上文，logger 通过 skynet_context_new 进行创建，在 skynet_context_new 中可以看到对 skynet-module 的引用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">skynet_context_new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">根据名字来获取一个&lt;/span>&lt;span class="n">module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_module&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">mod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_module_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;in skynet_context_new &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">mod&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">创建出&lt;/span>&lt;span class="n">module的实例&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">inst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_module_instance_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mod&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">inst&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">创建&lt;/span>&lt;span class="n">Ctx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CHECKCALLING_INIT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mod&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">设置其他&lt;/span>&lt;span class="n">cxt的变量初始值&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CHECKCALLING_BEGIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">mod&lt;/span> &lt;span class="err">初始化&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_module_instance_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mod&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CHECKCALLING_END&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>skynet_context_new 本身是为了创建 skynet_context， 但可以看到 skynet_context 中加载对应 skynet_module , 并创建了对应的实例， 下面就具体看看怎么实现的。&lt;/p>
&lt;h2 id="skynet_module-基本机构">skynet_module 基本机构
&lt;/h2>&lt;p>先看看skynet_module的结构&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">typedef&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">skynet_dl_create&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">void&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">typedef&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">skynet_dl_init&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">parm&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">typedef&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">skynet_dl_release&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">typedef&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">skynet_dl_signal&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="k">signal&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_module&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">名字&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">module&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">module的地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_dl_create&lt;/span> &lt;span class="n">create&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">创建&lt;/span>&lt;span class="n">module实例执行的函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_dl_init&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">初始化&lt;/span>&lt;span class="n">module执行的函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_dl_release&lt;/span> &lt;span class="n">release&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">释放&lt;/span>&lt;span class="n">module执行函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_dl_signal&lt;/span> &lt;span class="k">signal&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">module信号执行函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于skynet来说，一个module相当于有一个名字以及对应的4个需要执行的函数&lt;/p>
&lt;p>在skynet_context_new中有一个skynet_module_query，这个函数会将module导入进来&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">struct&lt;/span> &lt;span class="n">modules&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">spinlock&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_module&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAX_MODULE_TYPE&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>导入进来的 skynet_module 会被保存在 modules 的数组中，MAX_MODULE_TYPE 默认是32.&lt;/p>
&lt;h3 id="skynet_module_query-导入过程">skynet_module_query 导入过程
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="err">查找一下当前的&lt;/span>&lt;span class="n">M中释放已经存在了对应的module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_module&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">strcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_module&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">skynet_module_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">查找一下当前的&lt;/span>&lt;span class="n">M中释放已经存在了对应的module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_module&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">没有的话就需要加锁导入&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SPIN_LOCK&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">double&lt;/span> &lt;span class="n">check&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">NULL&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">MAX_MODULE_TYPE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_try_open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">尝试导入对应名字的&lt;/span>&lt;span class="n">so&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">dl&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">module&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">open_sym&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">将对应的&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">个函数进行赋值&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_strdup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="o">//&lt;/span>&lt;span class="err">完成后返回导入的&lt;/span>&lt;span class="n">module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SPIN_UNLOCK&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>skynet_module_query 执行的行为很简单, 如果当前缓存内不存在，就加锁导入进行导入，导入时通过_try_open进行的，导入完成后需要对skynet_module内的所有变量进行赋值&lt;/p>
&lt;p>open_sym 是对传入的skynet_module的4个函数进行赋值，里面是使用字符串拼接的方式将module名字和函数名字拼在一起后通过dlsym的方式找到对应的函数&lt;/p>
&lt;p>_try_open 实际上是dlopen的包装，在给定的搜索路径内搜索对应的so文件，然后尝试用dlopen打开。&lt;/p>
&lt;p>skynet_module.c 内的其他接口就是对结构体内的保存的4个函数地址的封装&lt;/p>
&lt;h2 id="小结">小结
&lt;/h2>&lt;p>skynet_module 这个结构本身就是对so的一个包装，如果一个so需要通过这种方式加载到skynet内当作服务的话，则需要实现对应的4个方法。&lt;/p></description></item><item><title>Skynet源码阅读笔记(二)-SkynetModule</title><link>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%BA%8C-skynetmodule/</link><pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate><guid>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%BA%8C-skynetmodule/</guid><description>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%BA%8C-skynetmodule/skynet.png" alt="Featured image of post Skynet源码阅读笔记(二)-SkynetModule" />&lt;h1 id="skynet源码阅读笔记-skynetmodule">Skynet源码阅读笔记-SkynetModule
&lt;/h1>&lt;p>skynet的服务可以认为是 SkynetModule 的实例，skynet本身自带了4个类型的服务，gate、logger、snlua、 harbor。 自带的这几个服务位于 service-src下。&lt;/p>
&lt;p>承接上文，logger 通过 skynet_context_new 进行创建，在 skynet_context_new 中可以看到对 skynet-module 的引用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">skynet_context_new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">根据名字来获取一个&lt;/span>&lt;span class="n">module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_module&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">mod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_module_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;in skynet_context_new &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">mod&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">创建出&lt;/span>&lt;span class="n">module的实例&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">inst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_module_instance_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mod&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">inst&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">创建&lt;/span>&lt;span class="n">Ctx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CHECKCALLING_INIT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mod&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">设置其他&lt;/span>&lt;span class="n">cxt的变量初始值&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CHECKCALLING_BEGIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">mod&lt;/span> &lt;span class="err">初始化&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_module_instance_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mod&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CHECKCALLING_END&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>skynet_context_new 本身是为了创建 skynet_context， 但可以看到 skynet_context 中加载对应 skynet_module , 并创建了对应的实例， 下面就具体看看怎么实现的。&lt;/p>
&lt;h2 id="skynet_module-基本机构">skynet_module 基本机构
&lt;/h2>&lt;p>先看看skynet_module的结构&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">typedef&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">skynet_dl_create&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">void&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">typedef&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">skynet_dl_init&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">parm&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">typedef&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">skynet_dl_release&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">typedef&lt;/span> &lt;span class="n">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">skynet_dl_signal&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">inst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ne">int&lt;/span> &lt;span class="k">signal&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_module&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">名字&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">module&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">module的地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_dl_create&lt;/span> &lt;span class="n">create&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">创建&lt;/span>&lt;span class="n">module实例执行的函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_dl_init&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">初始化&lt;/span>&lt;span class="n">module执行的函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_dl_release&lt;/span> &lt;span class="n">release&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">释放&lt;/span>&lt;span class="n">module执行函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_dl_signal&lt;/span> &lt;span class="k">signal&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">module信号执行函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于skynet来说，一个module相当于有一个名字以及对应的4个需要执行的函数&lt;/p>
&lt;p>在skynet_context_new中有一个skynet_module_query，这个函数会将module导入进来&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">struct&lt;/span> &lt;span class="n">modules&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">spinlock&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_module&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAX_MODULE_TYPE&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>导入进来的 skynet_module 会被保存在 modules 的数组中，MAX_MODULE_TYPE 默认是32.&lt;/p>
&lt;h3 id="skynet_module_query-导入过程">skynet_module_query 导入过程
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="err">查找一下当前的&lt;/span>&lt;span class="n">M中释放已经存在了对应的module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_module&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">strcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_module&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">skynet_module_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">查找一下当前的&lt;/span>&lt;span class="n">M中释放已经存在了对应的module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_module&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="err">没有的话就需要加锁导入&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SPIN_LOCK&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">double&lt;/span> &lt;span class="n">check&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">NULL&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">MAX_MODULE_TYPE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_try_open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">尝试导入对应名字的&lt;/span>&lt;span class="n">so&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">dl&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">module&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">open_sym&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">将对应的&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">个函数进行赋值&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_strdup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="o">//&lt;/span>&lt;span class="err">完成后返回导入的&lt;/span>&lt;span class="n">module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SPIN_UNLOCK&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>skynet_module_query 执行的行为很简单, 如果当前缓存内不存在，就加锁导入进行导入，导入时通过_try_open进行的，导入完成后需要对skynet_module内的所有变量进行赋值&lt;/p>
&lt;p>open_sym 是对传入的skynet_module的4个函数进行赋值，里面是使用字符串拼接的方式将module名字和函数名字拼在一起后通过dlsym的方式找到对应的函数&lt;/p>
&lt;p>_try_open 实际上是dlopen的包装，在给定的搜索路径内搜索对应的so文件，然后尝试用dlopen打开。&lt;/p>
&lt;p>skynet_module.c 内的其他接口就是对结构体内的保存的4个函数地址的封装&lt;/p>
&lt;h2 id="小结">小结
&lt;/h2>&lt;p>skynet_module 这个结构本身就是对so的一个包装，如果一个so需要通过这种方式加载到skynet内当作服务的话，则需要实现对应的4个方法。&lt;/p></description></item><item><title>Skynet源码阅读笔记-启动流程</title><link>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</link><pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate><guid>https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</guid><description>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/skynet.png" alt="Featured image of post Skynet源码阅读笔记-启动流程" />&lt;h1 id="skynet源码阅读笔记-启动流程">Skynet源码阅读笔记-启动流程
&lt;/h1>&lt;p>&lt;img src="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/skynet%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.png"
width="367"
height="799"
srcset="https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/skynet%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B_hu14209706775156221845.png 480w, https://frozenlychees.github.io/p/skynet%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/skynet%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B_hu6369978266664616690.png 1024w"
loading="lazy"
alt="skynet启动流程"
class="gallery-image"
data-flex-grow="45"
data-flex-basis="110px"
>&lt;/p>
&lt;h2 id="主流程">主流程
&lt;/h2>&lt;p>main函数在skynet_main.c中, 主函数里的流程看起来不算很长，这边全贴出来，然后分块分析&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="ne">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="mf">1.&lt;/span> &lt;span class="err">判断是否传入了配置，没有的话就退出了&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">config_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">NULL&lt;/span> &lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">config_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Need a config file. Please read skynet wiki : https://github.com/cloudwu/skynet/wiki/Config&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;usage: skynet configfilename&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="mf">2.&lt;/span> &lt;span class="err">初始化&lt;/span>&lt;span class="n">skynet的主线程相关的变量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_globalinit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="mf">3.&lt;/span> &lt;span class="err">初始化&lt;/span>&lt;span class="n">skynet的环境&lt;/span>&lt;span class="err">，其中包括一个&lt;/span>&lt;span class="n">lua环境和一个自旋锁&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_env_init&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="mf">4.&lt;/span> &lt;span class="err">信号处理相关&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sigign&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_config&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#ifdef LUA_CACHELIB&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">init&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">lock&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">code&lt;/span> &lt;span class="n">cache&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">luaL_initcodecache&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#endif&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">初始化一个&lt;/span>&lt;span class="n">lua虚拟机&lt;/span>&lt;span class="err">，用来读取配置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">lua_State&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">L&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">luaL_newstate&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">luaL_openlibs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">link&lt;/span> &lt;span class="n">lua&lt;/span> &lt;span class="n">lib&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">执行一段硬编码的&lt;/span>&lt;span class="n">lua代码&lt;/span>&lt;span class="err">，这个代码写在&lt;/span>&lt;span class="n">skynet_main&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">c文件里&lt;/span>&lt;span class="err">，就是&lt;/span>&lt;span class="n">load_config变量所对应的内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">load_config就是包装load进行的加载配置函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">这边是把&lt;/span>&lt;span class="n">load_config变成lua函数然后执行加载&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">err&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">luaL_loadbufferx&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">load_config&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">load_config&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;=[skynet config]&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;t&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">err&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">LUA_OK&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_pushstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">config_file&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">err&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lua_pcall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">lua_tostring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">这个函数看起来是把刚刚读取的配置设置到&lt;/span>&lt;span class="n">lua&lt;/span> &lt;span class="n">env全局变量中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_init_env&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">初始化&lt;/span>&lt;span class="n">skynet的基础配置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">optint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;thread&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">module_path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">optstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;cpath&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;./cservice/?.so&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">harbor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">optint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;harbor&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bootstrap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">optstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;bootstrap&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;snlua bootstrap&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">daemon&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">optstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;daemon&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">logger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">optstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;logger&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">logservice&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">optstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;logservice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;logger&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">profile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">optboolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;profile&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lua_close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span>&lt;span class="n">skynet&lt;/span> &lt;span class="err">框架启动&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_globalexit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>##skynet_start
从上面的代码解析，可以清楚的知道，skynet启动的主要函数就是skynet_start，看看它做了什么&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">skynet_start(struct skynet_config * config) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // register SIGHUP for log file reopen
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 首先是注册了一个SIGHUP的信号执行函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct sigaction sa;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sa.sa_handler = &amp;amp;handle_hup;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sa.sa_flags = SA_RESTART;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sigfillset(&amp;amp;sa.sa_mask);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sigaction(SIGHUP, &amp;amp;sa, NULL);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 看配置是否创建守护进程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (config-&amp;gt;daemon) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (daemon_init(config-&amp;gt;daemon)) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exit(1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 初始化 Harbor节点的数量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_harbor_init(config-&amp;gt;harbor);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 初始化handle的存储
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_handle_init(config-&amp;gt;harbor);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 初始化全局消息队列
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_mq_init();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 初始化模块的查找路径
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_module_init(config-&amp;gt;module_path);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 初始化定时器相关
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_timer_init();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 初始化socket相关
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_socket_init();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // profile是否打开
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_profile_enable(config-&amp;gt;profile);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 初始化logger相关服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct skynet_context *ctx = skynet_context_new(config-&amp;gt;logservice, config-&amp;gt;logger);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (ctx == NULL) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fprintf(stderr, &amp;#34;Can&amp;#39;t launch %s service\n&amp;#34;, config-&amp;gt;logservice);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exit(1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_handle_namehandle(skynet_context_handle(ctx), &amp;#34;logger&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 启动config-&amp;gt;bootstrap 所配置的服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bootstrap(ctx, config-&amp;gt;bootstrap);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 启动线程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> start(config-&amp;gt;thread);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // harbor_exit may call socket send, so it should exit before socket_free
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_harbor_exit();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skynet_socket_free();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (config-&amp;gt;daemon) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> daemon_exit(config-&amp;gt;daemon);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码主要就是初始化skynet的组件，然后启动logger、定时器等相关服务，然后调用bootstrap 和 start&lt;/p>
&lt;h2 id="bootstrap">bootstrap
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="n">void&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bootstrap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">logger&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">cmdline&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">sz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cmdline&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">char&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">sz&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">char&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">sz&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ne">int&lt;/span> &lt;span class="n">arg_pos&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sscanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cmdline&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">arg_pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">arg_pos&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">sz&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cmdline&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">arg_pos&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">arg_pos&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">strncpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cmdline&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">arg_pos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sz&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\0&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">skynet_context&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skynet_context_new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Bootstrap error : &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cmdline&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">skynet_context_dispatchall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>bootstrap 主要就是根据config-&amp;gt;bootstrap配置来启动一个新的服务，在默认配置下一般都是snlua bootstrap&lt;/p>
&lt;h2 id="start">start
&lt;/h2>&lt;p>start函数主要是启动所有对应个数的线程，具体代码如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">static void
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">start(int thread) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pthread_t pid[thread+3]; //额外多3个线程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct monitor *m = skynet_malloc(sizeof(*m));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memset(m, 0, sizeof(*m));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> m-&amp;gt;count = thread;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> m-&amp;gt;sleep = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //给每个线程都分配一个skynet_monitor
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> m-&amp;gt;m = skynet_malloc(thread * sizeof(struct skynet_monitor *));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int i;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (i=0;i&amp;lt;thread;i++) { // 这个循环稍微有一点疑问，要么应该是i&amp;lt;thread+3 要么应该i从3开始，或者是我没理解正确理解
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> m-&amp;gt;m[i] = skynet_monitor_new();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 初始化monitor的锁和条件变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (pthread_mutex_init(&amp;amp;m-&amp;gt;mutex, NULL)) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fprintf(stderr, &amp;#34;Init mutex error&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exit(1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (pthread_cond_init(&amp;amp;m-&amp;gt;cond, NULL)) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fprintf(stderr, &amp;#34;Init cond error&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exit(1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 额外的三个线程用于定时器、监控、socket
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> create_thread(&amp;amp;pid[0], thread_monitor, m);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> create_thread(&amp;amp;pid[1], thread_timer, m);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> create_thread(&amp;amp;pid[2], thread_socket, m);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> static int weight[] = {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -1, -1, -1, -1, 0, 0, 0, 0,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1, 1, 1, 1, 1, 1, 1, 1,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2, 2, 2, 2, 2, 2, 2, 2,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 3, 3, 3, 3, 3, 3, 3, 3, };
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> struct worker_parm wp[thread];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 给线程分配权重，并执行thread_worker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (i=0;i&amp;lt;thread;i++) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wp[i].m = m;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wp[i].id = i;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (i &amp;lt; sizeof(weight)/sizeof(weight[0])) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wp[i].weight= weight[i];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wp[i].weight = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> create_thread(&amp;amp;pid[i+3], thread_worker, &amp;amp;wp[i]);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //主线程等待其他线程结束
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (i=0;i&amp;lt;thread+3;i++) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pthread_join(pid[i], NULL);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> free_monitor(m);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>主线程会额外启动三个线程，分别用于定时器、监控、socket， 在启动完毕所有线程之后，会阻塞等待所有线程的退出。对于每一个线程来说，还会再weight中有对应的权重，权重的作用先不探究。&lt;/p></description></item></channel></rss>